<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>个人Crypto Currency总结</title>
      <link href="/2025/01/11/%E4%B8%AA%E4%BA%BACrypto-Currency%E6%80%BB%E7%BB%93/"/>
      <url>/2025/01/11/%E4%B8%AA%E4%BA%BACrypto-Currency%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="个人记录参考"><a href="#个人记录参考" class="headerlink" title="个人记录参考"></a>个人记录参考</h1><ol><li>ETH基金会地址：<a href="https://intel.arkm.com/explorer/address/0xd779332c5A52566Dada11A075a735b18DAa6c1f4">https://intel.arkm.com/explorer/address/0xd779332c5A52566Dada11A075a735b18DAa6c1f4</a></li></ol><h1 id="总结性的规律"><a href="#总结性的规律" class="headerlink" title="总结性的规律"></a>总结性的规律</h1><ol><li>如果此地址卖出则逃顶，ETH基金会通常只卖出100eth</li><li>大多数情况下，比特币是币圈涨跌的领导者，以太品质强硬的币有时会脱离比特币影响走出单边行情，山寨币基本逃不脱它的影响。</li><li>比特币和USDT是反向运动，如果发现USDT涨了，就要警惕比特币跌，比特币涨的时候是买入USDT的合适时机。</li><li>每天0-1点之间容易出现插针现象，所以国内币友可以在临睡前尽量低的挂个心仪币的买入价，尽量高的挂个卖出价，说不定就成交了，躺着赚。</li><li>每天早上6-8点是一个判断买入或卖出的时机，同时也是判断当天涨跌的时间点，如果0点到6点一直跌，这个时段仍然在跌，是个买入或补仓的时机，当天基本是涨，如果0点到6点一直是涨，这个时段仍在涨，是卖出时机，当天大概率会跌。</li><li>下午5点是江湖上传言的重要关注点，时差关系，美国币友起床干活了，可能会引起币的涨跌波动，一些大涨或大跌确实在这个时间点发生，所以要特别留心。</li><li>币圈有“黑色星期五”的说法，有过几次碰巧周五大跌的情况，但也有大涨或横盘的情况，不算特别准，稍微留意消息面即可。</li><li>有一定交易量保障的币如果跌了，不用担心，耐心持有一定会回本，短的3、4天，长的一个月，如果有余USDT，分批补仓，把价格拉下来，回本会快点，没有余钱就等等，不会让你失望的。除非你真的买了垃圾币。</li><li>做现货买卖同样的币长线持有少量交易比频繁交易的收益要大，就看你有没有耐心持有。我0.05买的狗狗币，持有到现在翻了近10倍，是所有币里涨幅最高的（当时才买1000个，打算持有到2025年中旬，推特支付支持狗狗币的时候再卖）。</li><li>影响币圈动荡的因素：</li></ol><ul><li>各国对加密货币的态度，如果是负面的基本上会有一波跌；</li><li>美国金融政策，比如前段时间美国司法部获准出售被扣押的价值 65 亿美元的丝绸之路案相关比特币，对比特币价格带来波动。（「丝绸之路」曾是暗网中最具价值的电商平台，为Ross Ulbricht 于2011 年所创建，该网站因贩卖毒品于2013 年遭美国联邦调查局(FBI) 下架，而Ulbricht则因共谋分发毒品、共谋洗钱等罪被判终身监禁，不得假释。）</li><li>马斯克这类大佬对加密货币的态度，比如马斯克没事发个有比特币、狗狗币信息的X文，推高这两个币价；2525年1月16号发射星舰同时带动狗狗币串升，带动币圈上涨。</li><li>比如巴菲特不看好比特币之类言论<blockquote><p>所以要留意财经新闻，比如cointelegraph.com国外媒体，有句话我十分赞同：知识边界决定财富边界，人只能赚到他知识边界内的财富。</p></blockquote></li></ul><ol start="11"><li>炒币心态一定要好，大跌的时候不要血压飙升，大涨的时候也不要得意忘形，落袋为安为重。刚开始炒币的时候也曾经担心到睡不好觉，半夜惊醒市场有，现在已经淡定很多了。</li></ol><h2 id="没有太多资源的人踏踏实实是颠覆不破的生存知道，祝你好运。"><a href="#没有太多资源的人踏踏实实是颠覆不破的生存知道，祝你好运。" class="headerlink" title="没有太多资源的人踏踏实实是颠覆不破的生存知道，祝你好运。"></a>没有太多资源的人踏踏实实是颠覆不破的生存知道，祝你好运。</h2><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>记一段英文详解</title>
      <link href="/2025/01/05/%E8%AE%B0%E4%B8%80%E6%AE%B5%E8%8B%B1%E6%96%87%E8%AF%A6%E8%A7%A3/"/>
      <url>/2025/01/05/%E8%AE%B0%E4%B8%80%E6%AE%B5%E8%8B%B1%E6%96%87%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h1 id="文章地址"><a href="#文章地址" class="headerlink" title="文章地址"></a>文章地址</h1><p>英文：<a href="https://cointelegraph.com/news/microstrategy-eyes-2-billion-preferred-stock-raise-to-buy-more-bitcoin">https://cointelegraph.com/news/microstrategy-eyes-2-billion-preferred-stock-raise-to-buy-more-bitcoin</a><br>中文: <a href="https://cn.cointelegraph.com/news/microstrategy-eyes-2-billion-preferred-stock-raise-to-buy-more-bitcoin">https://cn.cointelegraph.com/news/microstrategy-eyes-2-billion-preferred-stock-raise-to-buy-more-bitcoin</a></p><blockquote><p>MicroStrategy, the largest corporate holder of Bitcoin, is eyeing a $2 billion raise from a perpetual preferred stock offering to buy more Bitcoin in a move that would expand on the company’s “21&#x2F;21” plan.<br>The perpetual preferred stock may be obtained through converting MicroStrategy’s class A common stock, paying a cash dividend, redeeming shares or a combination of these, the Bitcoin-stacking business intelligence firm explained in a Jan. 3 statement.</p></blockquote><ul><li>原文翻译：<br>比特币最大的企业股东MicroStrategy正在考虑通过永久优先股发行筹集20亿美元，以购买更多的比特币，此举将扩大该公司的“21&#x2F;21”计划。<br>这家持有比特币的商业智能公司在1月3日的一份声明中解释说，永久优先股可以通过转换MicroStrategy的A类普通股、支付现金股息、赎回股票或以上几种方式的组合获得。</li><li>AI翻译：<br>MicroStrategy，作为最大的比特币企业持有者，正在考虑通过发行永续优先股筹集20亿美元的资金，以购买更多的比特币，这一举措将扩展公司的“21&#x2F;21”计划。<br>根据这家专注于堆积比特币的商业智能公司在1月3日发布的声明，永续优先股可以通过转换MicroStrategy的A类普通股、支付现金股息、赎回股份或这些方法的组合来获得。</li></ul><h1 id="第一句句子结构分析："><a href="#第一句句子结构分析：" class="headerlink" title="第一句句子结构分析："></a>第一句句子结构分析：</h1><ul><li>MicroStrategy(微策略) 主语</li><li>the largest corporate holder of Bitcoin 同位语</li><li>is eyeing 谓语动词, 现在进行时，表示正在考虑中</li><li>a $2 billiom raise 宾语，一个名词短语，$2 billion是数量修饰词，raise表示筹集资金的动作。</li><li>from a perpetual preferred stock offering 介词短语，修饰raise的来源。表明资金来源，来自永久优先股发行</li><li>in a move that would expand on the company’s “21&#x2F;21” plan 介词短语，作状语，解释这次行动的意义，其中包含一个that引导的定于从句，修饰move</li></ul><h2 id="总结第一句的结构："><a href="#总结第一句的结构：" class="headerlink" title="总结第一句的结构："></a>总结第一句的结构：</h2><pre><code>主语 + 同位语 + 谓语 + 宾语 + 介词短语 + 不定式短语 + 介词短语 + 定语从句</code></pre><h1 id="第二句句子结构分析："><a href="#第二句句子结构分析：" class="headerlink" title="第二句句子结构分析："></a>第二句句子结构分析：</h1><ul><li>the perpetual preferred stock 主语，复合名词短语。</li><li>may be obtained 谓语动词，用情态动词“may”表示可能性。</li><li>through converting MicroStrategy’s class A common stock, paying a cash dividend, redeeming shares or a combination of these - 介词短语，作方式状语，解释如何获得永续优先股，其中包含多个并列的动名词短语。<ul><li>converting MicroStrategy’s class A common stock 动名词短语</li><li>paying a cash dividend 动名词短语</li><li>redeeming shares 动名词短语</li><li>or a combination of these 名词短语，选项之一</li></ul></li><li>the Bitcoin-stacking business intelligence firm explained in a Jan.3 statement 一个独立主格结构,作为插入语，起到解释或评论的作用。它不是主句的必须语法成分，而是提供额外的信息，类似于一个非限定性定语从句。提供了更多的上下文和背景信息。</li><li>the Bitcoin-stacking business intelligence firm 主语，复合名词短语</li><li>explained 谓语动词，过去式</li><li>in a Jan.3 statement 介词短语，作状语，修饰explained<br> 所谓的插入语指的是对一句话所做的附加解释：<br>  如：That will be a good beginning, I hope<br>  解释：I hope 如果放在句子中间断开或放在句末，就是插入语。如果放在句首就不是，而是一个主句。 如： I think he will help you 。这句话中主句是I think；从句是he will help you</li></ul><h2 id="总结第二句的结构："><a href="#总结第二句的结构：" class="headerlink" title="总结第二句的结构："></a>总结第二句的结构：</h2><p> 主语 + 情态动词 + 被动语态谓语 + 介词短语 + 插入语 + 谓语 + 介词短语</p><h1 id="解读："><a href="#解读：" class="headerlink" title="解读："></a>解读：</h1><ul><li>MicroStrategy 是主语，这里提到它是最大的比特币企业持有者，表明该公司在加密货币市场上的重要地位。</li><li>筹资20亿美元（eyeing a $2 billion raise）：公司通过永续优先股发行（perpetual preferred stock offering）来筹集资金。永续优先股是一种没有固定到期日的优先股，意味着公司不需要在特定日期偿还这些资金，通常提供稳定的股息。</li><li>购买更多比特币（to buy more Bitcoin）：筹集的资金目的是为了增加比特币的持有量。这表明公司对比特币未来的价值持乐观态度，继续加码投资。</li><li>扩大“21&#x2F;21”计划（expand on the company’s “21&#x2F;21” plan）：这是一个策略计划，可能是指每年在特定的时间点（如21号）进行比特币投资或者与比特币相关的其他举措。计划的具体内容未在句子中详细说明，但显然这次筹资是为了进一步推进这个计划。</li><li>获得永续优先股的方式：</li><li>转换A类普通股（converting MicroStrategy’s class A common stock）：现有股东可以将手中的股份转换为永续优先股。</li><li>支付现金股息（paying a cash dividend）：公司可能通过现金支付来换取永续优先股。</li><li>赎回股份（redeeming shares）：公司回购其发行的股份，可能是以永续优先股的方式。</li><li>或这些方法的组合（or a combination of these）：表明公司可以灵活使用这些策略来发行永续优先股。</li><li>解释来源：这家被称为比特币堆积的商业智能公司（Bitcoin-stacking business intelligence firm）在1月3日的声明中提供了这些信息，说明公司对外沟通透明度较高。</li></ul><p>这整段话展示了MicroStrategy在加密货币投资策略上的主动性和创新性，同时也揭示了公司如何通过金融工具来支持其对比特币的长期押注。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>免费使用谷歌Gemini API 通过Cloudflare中转</title>
      <link href="/2025/01/05/%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8CGemini-API-%E9%80%9A%E8%BF%87Cloudflare%E4%B8%AD%E8%BD%AC/"/>
      <url>/2025/01/05/%E5%85%8D%E8%B4%B9%E4%BD%BF%E7%94%A8%E8%B0%B7%E6%AD%8CGemini-API-%E9%80%9A%E8%BF%87Cloudflare%E4%B8%AD%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h1><p>Google Gemini 是所有一线顶级大模型当中，唯一一个 Api 可以免费白嫖的。本期视频借助互联网大善人 Cloudflare，中转一下 Gemini api，这样就可以得到一个国内免费爽用的顶级大模型。有了 api 以后，我们可以 ai 编程，可以聊天，可以音视频通话，做各种好玩的事情。 </p><h1 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h1><pre><code>由于国内不能直接连接AI的api，需要通过自己的域名中转。提前准备账号：cloudflare账号，Google账号，GitHub账号</code></pre><h1 id="操作步骤："><a href="#操作步骤：" class="headerlink" title="操作步骤："></a>操作步骤：</h1><ol><li>Gemini 转OpenAI<br>打开： <a href="https://github.com/PublicAffairs/openai-gemini">https://github.com/PublicAffairs/openai-gemini</a><br>操作 &gt; Deploy with Worker 在Cloudflare创建Worker，充当中转。<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMmZ3_cqFRouwgdyWtoIJ_6L1S0OHEAAvjFMRuGcAFUMEqi_b-RmGwBAAMCAAN4AAM2BA" alt="gemini2025-01-09_22-25-49.png"><br>需要fork到自己的仓库后绑定自定义域名。</li><li>Gemini API申请<br>科学上网后登录如下网址: <a href="https://aistudio.google.com/">https://aistudio.google.com/</a> 并get API key<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMnZ3_db5LGdzTe9fChGhYETg-20C4AAvrFMRuGcAFUkv-Omc9Isr8BAAMCAAN5AAM2BA" alt="apikey_2025-01-09_22-29-46.png"></li><li>下载并配置chatbox<br>chatbox: <a href="https://github.com/Bin-Huang/chatbox">https://github.com/Bin-Huang/chatbox</a></li></ol><ul><li>配置api密钥</li><li>配置api域名</li><li>配置自定义模型gemini-2.0-flash-exp<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMoZ3_d7oRXVyK3RFEDm68jx7ug4ysAAvvFMRuGcAFUMWM7xIPx0cEBAAMCAAN5AAM2BA" alt="chatbox2025-01-09_22-31-54.png"></li></ul><p><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMlZ3qZe6mIrtIaVIKmzjUZws34Ai4AAjbEMRuG4tlXVx9Pp1JZOhYBAAMCAAN3AAM2BA" alt="gemini_2025-01-05_22-37-18.jpg"></p><p><a href="https://gemini.51santi.uk/v1/models">https://gemini.51santi.uk/v1/models</a><br>Token<br>response</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;object&quot;</span>: <span class="string">&quot;list&quot;</span>,</span><br><span class="line">    <span class="string">&quot;data&quot;</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;text-bison-001&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;embedding-gecko-001&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.0-pro-latest&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.0-pro&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-pro&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.0-pro-001&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.0-pro-vision-latest&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-pro-vision&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-pro-latest&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-pro-001&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-pro-002&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-pro&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-pro-exp-0801&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-pro-exp-0827&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-latest&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-001&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-001-tuning&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-exp-0827&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-002&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-8b&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-8b-001&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-8b-latest&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-8b-exp-0827&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-1.5-flash-8b-exp-0924&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-2.0-flash-exp&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-exp-1206&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-exp-1121&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-exp-1114&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-2.0-flash-thinking-exp&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;gemini-2.0-flash-thinking-exp-1219&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;learnlm-1.5-pro-experimental&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;embedding-001&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;text-embedding-004&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">&quot;id&quot;</span>: <span class="string">&quot;aqa&quot;</span>,</span><br><span class="line">            <span class="string">&quot;object&quot;</span>: <span class="string">&quot;model&quot;</span>,</span><br><span class="line">            <span class="string">&quot;created&quot;</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="string">&quot;owned_by&quot;</span>: <span class="string">&quot;&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>我的健身小结</title>
      <link href="/2024/12/25/%E6%88%91%E7%9A%84%E5%81%A5%E8%BA%AB%E5%B0%8F%E7%BB%93/"/>
      <url>/2024/12/25/%E6%88%91%E7%9A%84%E5%81%A5%E8%BA%AB%E5%B0%8F%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="1-为啥要坚持运动？一个理由就够了让你更年轻。"><a href="#1-为啥要坚持运动？一个理由就够了让你更年轻。" class="headerlink" title="1.为啥要坚持运动？一个理由就够了让你更年轻。"></a>1.为啥要坚持运动？一个理由就够了让你更年轻。</h1><h2 id="身体状态更年轻："><a href="#身体状态更年轻：" class="headerlink" title="身体状态更年轻："></a>身体状态更年轻：</h2><p>人到50&#x2F;60岁，肌肉会流失一半。1张图就解释了<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMiZ3oZhFbbWAuNlDsL-BjEPXiJxD8AArTCMRuG4tFXIzSaJmM3PhQBAAMCAAN4AAM2BA" alt="apple_2025-01-05_13-31-56.png"><br>坚持健身的人，就是左边的苹果。不健身的，年纪越大，就是右边的。<br>其次，精神状态更年轻。这个主要是内啡肽的作用。具体的可以看下这篇文章《多巴胺和内啡肽使用指南》</p><h1 id="2-为啥一定要以力量运动为主？"><a href="#2-为啥一定要以力量运动为主？" class="headerlink" title="2.为啥一定要以力量运动为主？"></a>2.为啥一定要以力量运动为主？</h1><p>参考第一个回答，维持肌肉量。但不是说不做有氧，要根据自己身体情况。最终都是要以力量为主。</p><h1 id="3-网络太嘈杂，如何判断哪些声音是对的？靠体系"><a href="#3-网络太嘈杂，如何判断哪些声音是对的？靠体系" class="headerlink" title="3.网络太嘈杂，如何判断哪些声音是对的？靠体系"></a>3.网络太嘈杂，如何判断哪些声音是对的？靠体系</h1><p><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMjZ3ob43iOVtCVHVhkFJ9tlWmpFUAAArfCMRuG4tFXPYgNuVi0SrwBAAMCAAN5AAM2BA" alt="健身2025-01-05_13-40-46.png"><br>参考这个体系。了解底层逻辑。对自己的水平和所处的阶段，要有清醒的认知。这样才不会被人玩。<br>和我儿子一样。要先会爬，再会站，再会走，再会跑。循序渐进。我目前就是练最底下3层得东西，吃透了。才会进阶。<br>举例。网络的博主都很片面，大多都是出于某些目标。有个博主说，新人一定要做爆发训练，不然就是死肌肉。那这个就是害人的。就这么看就行。因为爆发力是高阶的训练，一般普通人不配。其次就是，这些东西都是同步提升的。也就是如果你想B变强，那你底下的A一定是先增强。我现在就是在恶补我的下面2层的训练，对力量训练提升很大。还有就是一定要重视最底下两层的训练，这是地基。</p><h1 id="4-为何一定要重视、加强功能性训练？"><a href="#4-为何一定要重视、加强功能性训练？" class="headerlink" title="4.为何一定要重视、加强功能性训练？"></a>4.为何一定要重视、加强功能性训练？</h1><p>举例。如果还没学会爬，就想走，这就是不具备走的功能，就很容易摔跤，磕磕碰碰。爬行对于走就是功能性训练：稳定性、肩胛核心、腰腹核心、髋膝踝联动的功能。只有爬的到位了，才能进阶走的训练。记得每周都要练功能，只练力量的都是健身文盲。</p><h1 id="5-早上吃的好，中午吃的饱，晚上吃的少怎么理解，万能公式是啥？"><a href="#5-早上吃的好，中午吃的饱，晚上吃的少怎么理解，万能公式是啥？" class="headerlink" title="5.早上吃的好，中午吃的饱，晚上吃的少怎么理解，万能公式是啥？"></a>5.早上吃的好，中午吃的饱，晚上吃的少怎么理解，万能公式是啥？</h1><p>吃就是摄入营养，核心营养记住4个字就行：碳、蛋、脂、维碳水蛋白质脂肪维生素早上吃的好——指得是均衡。碳蛋脂维最好都要摄入。<br>碳水：馒头、包子、稀饭xxxx<br>蛋白质：鸡蛋、牛奶等脂肪：油、带脂肪的肉类、坚果<br>维生素：绿菜和一些水果<br>中午吃的饱——多吃点碳水晚上吃的少——少吃点碳水凯圣王说（贾玲点赞的博主），节食减肥的都是健身文盲。可以算的很精细化，真的很科学。</p><h1 id="7-健身房得都是死肌肉？"><a href="#7-健身房得都是死肌肉？" class="headerlink" title="7.健身房得都是死肌肉？"></a>7.健身房得都是死肌肉？</h1><p>真正厉害的都是活肌肉。不要被网络骗了<br>这些人普遍能劈叉的。参考前面的体系。后面我看了一个道家道长的观点，感觉有点理解了。大概意思是：普拉提、瑜伽啊，啥的帮助打开筋膜；力量训练，还有传统武术的马步，站桩，是让筋膜变粗。要先打开筋膜，然后想办法再把筋膜变粗。</p><h1 id="8-为啥有的人喝水都胖？"><a href="#8-为啥有的人喝水都胖？" class="headerlink" title="8.为啥有的人喝水都胖？"></a>8.为啥有的人喝水都胖？</h1><p>大致是这么个意思<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMkZ3odJvoOF8udlnc2WWjsq0UH5qIAArrCMRuG4tFXP3QAASZC8OGYAQADAgADeQADNgQ" alt="补水2025-01-05_13-47-56.png"></p><h1 id="9-健身不会上瘾？"><a href="#9-健身不会上瘾？" class="headerlink" title="9.健身不会上瘾？"></a>9.健身不会上瘾？</h1><p>会，身边很多人都有瘾。他的本质是内啡肽在起作用。人话一点就是，它能给与人当下正向的反馈。</p><h1 id="10-新手训练要注意什么"><a href="#10-新手训练要注意什么" class="headerlink" title="10.新手训练要注意什么"></a>10.新手训练要注意什么</h1><p>其实很多事情都一样，尤其是工作上。原理都一样，先做对，再做好。<br>先保证动作是标准的。然后参考一个加重量的标准然后等到你一个动作能标准做10次之后，就可以加重量了。</p><h1 id="11-为什么我建议找个训练搭子？"><a href="#11-为什么我建议找个训练搭子？" class="headerlink" title="11.为什么我建议找个训练搭子？"></a>11.为什么我建议找个训练搭子？</h1><p>小孩学走路时，起初是不敢往前走，站在原地。不敢迈出步子<br>那我就是他的训练搭子。我先牵着他一只手，让他感受走路的行程。然后再变成不牵手，只抓后衣领，最后在放手，很快就可以走了。训练搭子就是帮你进步，辅助的。其次是，缓解你的尴尬。新手嘛，最怕尴尬。</p><h1 id="12-怎么瘦肚子？"><a href="#12-怎么瘦肚子？" class="headerlink" title="12.怎么瘦肚子？"></a>12.怎么瘦肚子？</h1><p>和你说单个训练能手肚子的，都是骗子。要力量训练，增加肌肉量，尤其是练腿，基础代谢会增加，然后就瘦了。我就是这么没有肚子的。其次是增加一些呼吸训练，可以网上搜一下。最后是练腰腹核心，也可以辅助。</p><h1 id="13-明星圈谁的水平高？"><a href="#13-明星圈谁的水平高？" class="headerlink" title="13.明星圈谁的水平高？"></a>13.明星圈谁的水平高？</h1><p>彭于晏水平怎么样彭于晏只能说还行，体脂低。明星圈要看蒋劲夫，抖音上id叫加减法。参照体系的话，就是顶级水平。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ZFile网盘搭建</title>
      <link href="/2024/12/22/ZFile%E7%BD%91%E7%9B%98%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/12/22/ZFile%E7%BD%91%E7%9B%98%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>ZFile 是一个适用于个人的在线网盘(列目录)程序，可以将你各个存储类型的存储源，统一到一个网页中查看、预览、维护，再也不用去登录各种各样的网页登录后管理文件，现在你只需要在 ZFile 中使用。你只需要填写存储源相关信息，其他的令牌刷新，授权都是尽量自动化的，且有完善的文档帮助你使用。</p><p>支持对接 S3、OneDrive、SharePoint、Google Drive、多吉云、又拍云、本地存储、FTP、SFTP 等存储源<br>支持在线浏览图片、播放音视频，文本文件、Office、obj（3d）等文件类型。</p><h1 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h1><p><a href="https://demo.zfile.vip/local-demo">https://demo.zfile.vip/local-demo</a></p><h1 id="docker安装脚本"><a href="#docker安装脚本" class="headerlink" title="docker安装脚本"></a>docker安装脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -sSL https://cdn.jsdelivr.net/gh/SuperManito/LinuxMirrors@main/DockerInstallation.sh)</span><br></pre></td></tr></table></figure><h1 id="docker-compose安装脚本"><a href="#docker-compose安装脚本" class="headerlink" title="docker-compose安装脚本"></a>docker-compose安装脚本</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L &quot;https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)&quot; -o /usr/local/bin/docker-compose &amp;&amp; chmod +x /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure><blockquote><p>如果docker无法使用参考这篇文章<br><a href="https://www.ywsj365.com/archives/guo-nei-fu-wu-qi-ru-he-jie-jue-docker-wu-fa-la-qu-jing-xiang-de-wen-ti">https://www.ywsj365.com/archives/guo-nei-fu-wu-qi-ru-he-jie-jue-docker-wu-fa-la-qu-jing-xiang-de-wen-ti</a></p></blockquote><p>一、登录VPS创建docker-compose.yml文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir zfile_wangpan;cd zfile_wangpan  #创建一个目录，并进入此目录</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim docker-compose.yml</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">version: &#x27;3.9&#x27;</span><br><span class="line">services:</span><br><span class="line">    zfile:</span><br><span class="line">        image: zhaojun1998/zfile</span><br><span class="line">        volumes:</span><br><span class="line">            - &#x27;./zfile/file:/data/file&#x27;   #这里是文件目录映射后面会用到</span><br><span class="line">            - &#x27;./zfile/logs:/root/.zfile-v4/logs&#x27;</span><br><span class="line">            - &#x27;./zfile/db:/root/.zfile-v4/db&#x27;</span><br><span class="line">        ports:</span><br><span class="line">            - &#x27;8080:8080&#x27;   #左侧的端口可以自定义</span><br><span class="line">        restart: always</span><br><span class="line">        container_name: zfile</span><br></pre></td></tr></table></figure><h1 id="二、执行容器运行命令"><a href="#二、执行容器运行命令" class="headerlink" title="二、执行容器运行命令"></a>二、执行容器运行命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose up -d #运行容器</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps  #查看是否开启成功</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker-compose ps </span><br><span class="line">WARN[0000] /root/zfile_wangpan/docker-compose.yml: `version` is obsolete </span><br><span class="line">NAME      IMAGE               COMMAND                  SERVICE   CREATED          STATUS          PORTS</span><br><span class="line">zfile     zhaojun1998/zfile   &quot;/bin/sh -c &#x27;java $J…&quot;   zfile     44 seconds ago   Up 42 seconds   0.0.0.0:8080-&gt;8080/tcp, :::8080-&gt;8080/tcp</span><br></pre></td></tr></table></figure><h1 id="打开web页面使用"><a href="#打开web页面使用" class="headerlink" title="打开web页面使用"></a>打开web页面使用</h1><p>成功以后需要打开自己相应的端口(8080)防火墙就可以web端访问了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://ip:8080  #打开自己VPS的端口加ip进入web页面</span><br></pre></td></tr></table></figure><p><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMdZ2gfGUWZLyWGeRgBZ1zP7AXKGFAAApHBMRugkEFXqJ3hoOVMiKABAAMCAAN4AAM2BA" alt="ZF_2024-12-22_22-14-40.png"></p><p>初始化以后就可以使用了<br>注意本地存储填写&#x2F;data&#x2F;file<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMeZ2gfQadTP-wMQ6kSIjOMcyCWlO8AApLBMRugkEFXJw6RzhGkAAFEAQADAgADeAADNgQ" alt="ZF_2024-12-22_22-15-02.png"></p><blockquote><p>参考连接<br><a href="https://www.ywsj365.com/archives/zfile-wang-pan-da-jian-jiao-cheng">https://www.ywsj365.com/archives/zfile-wang-pan-da-jian-jiao-cheng</a></p></blockquote><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pixel手机连接wifi网络受限问题</title>
      <link href="/2024/12/08/pixel%E6%89%8B%E6%9C%BA%E8%BF%9E%E6%8E%A5wifi%E7%BD%91%E7%BB%9C%E5%8F%97%E9%99%90%E9%97%AE%E9%A2%98/"/>
      <url>/2024/12/08/pixel%E6%89%8B%E6%9C%BA%E8%BF%9E%E6%8E%A5wifi%E7%BD%91%E7%BB%9C%E5%8F%97%E9%99%90%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="1、什么是adb"><a href="#1、什么是adb" class="headerlink" title="1、什么是adb"></a>1、什么是adb</h1><p>ADB 全称为 Android Debug Bridge，起到调试桥的作用，是一个客户端-服务器端程序。其中客户端是用来操作的电脑，服务端是 Android 设备。</p><p>ADB 也是 Android SDK 中的一个工具，可以直接操作管理 Android 模拟器或者真实的 Android 设备。</p><h1 id="2、为什么要用adb"><a href="#2、为什么要用adb" class="headerlink" title="2、为什么要用adb"></a>2、为什么要用adb</h1><p>运行设备的 shell(命令行)<br>管理模拟器或设备的端口映射<br>计算机和设备之间上传&#x2F;下载文件<br>可以对设备的应用进行卸载安装等<br>在 App 遇到 ANR&#x2F;Crash 等 bug 时，可以通过 ADB 来抓取日志</p><h2 id="简而言之，ADB-就是连接-Android-手机与-PC-端的桥梁，所以ADB又称为安卓调试桥（注意：是安卓，不是iOS），可以让用户在电脑上对手机进行全面的操作！"><a href="#简而言之，ADB-就是连接-Android-手机与-PC-端的桥梁，所以ADB又称为安卓调试桥（注意：是安卓，不是iOS），可以让用户在电脑上对手机进行全面的操作！" class="headerlink" title="简而言之，ADB 就是连接 Android 手机与 PC 端的桥梁，所以ADB又称为安卓调试桥（注意：是安卓，不是iOS），可以让用户在电脑上对手机进行全面的操作！"></a>简而言之，ADB 就是连接 Android 手机与 PC 端的桥梁，所以ADB又称为安卓调试桥（注意：是安卓，不是iOS），可以让用户在电脑上对手机进行全面的操作！</h2><hr><h1 id="Pixel-手机网络受限原因"><a href="#Pixel-手机网络受限原因" class="headerlink" title="Pixel 手机网络受限原因"></a>Pixel 手机网络受限原因</h1><blockquote><p>问题产生的原因：海外机器会使用wifi向服务器发送请求，用于校验wifi状态<br>解决办法：修改校验服务器地址</p></blockquote><h2 id="1-确认电脑上装了adb"><a href="#1-确认电脑上装了adb" class="headerlink" title="1. 确认电脑上装了adb"></a>1. 确认电脑上装了adb</h2><h2 id="2-挨个执行以下命令"><a href="#2-挨个执行以下命令" class="headerlink" title="2. 挨个执行以下命令"></a>2. 挨个执行以下命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">adb shell settings delete global captive_portal_mode</span><br><span class="line"></span><br><span class="line">adb shell settings put global captive_portal_mode 0</span><br><span class="line">adb shell settings get global captive_portal_mode</span><br><span class="line"></span><br><span class="line">adb shell settings delete global captive_portal_https_url</span><br><span class="line">adb shell settings delete global captive_portal_http_url</span><br><span class="line"></span><br><span class="line">adb shell settings put global captive_portal_http_url http://connect.rom.miui.com/generate_204</span><br><span class="line">adb shell settings put global captive_portal_https_url https://connect.rom.miui.com/generate_204</span><br></pre></td></tr></table></figure><h2 id="3-执行完，切为飞行模式，再切换回来就好了"><a href="#3-执行完，切为飞行模式，再切换回来就好了" class="headerlink" title="3. 执行完，切为飞行模式，再切换回来就好了"></a>3. 执行完，切为飞行模式，再切换回来就好了</h2><p>————————————————</p><p>参考连接：<a href="https://blog.csdn.net/qq_18525247/article/details/128086408">https://blog.csdn.net/qq_18525247/article/details/128086408</a></p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>v2ray自建节点教程</title>
      <link href="/2024/11/18/v2ray%E8%87%AA%E5%BB%BA%E8%8A%82%E7%82%B9%E6%95%99%E7%A8%8B/"/>
      <url>/2024/11/18/v2ray%E8%87%AA%E5%BB%BA%E8%8A%82%E7%82%B9%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="一、免费VPS白嫖：https-www-youtube-com-watch-v-E3z-T7d2jEI"><a href="#一、免费VPS白嫖：https-www-youtube-com-watch-v-E3z-T7d2jEI" class="headerlink" title="一、免费VPS白嫖：https://www.youtube.com/watch?v=E3z-T7d2jEI"></a>一、免费VPS白嫖：<a href="https://www.youtube.com/watch?v=E3z-T7d2jEI">https://www.youtube.com/watch?v=E3z-T7d2jEI</a></h1><h1 id="二、Xshell连接并登录"><a href="#二、Xshell连接并登录" class="headerlink" title="二、Xshell连接并登录"></a>二、Xshell连接并登录</h1><h1 id="三、搭建代码"><a href="#三、搭建代码" class="headerlink" title="三、搭建代码"></a>三、搭建代码</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bash &lt;(curl -Ls https://raw.githubusercontent.com/mhsanaei/3x-ui/master/install.sh)</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>选择N，让脚本自动生成ip和账密</p></blockquote><h1 id="四、搭建完后，放行端口"><a href="#四、搭建完后，放行端口" class="headerlink" title="四、搭建完后，放行端口"></a>四、搭建完后，放行端口</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">iptables -I INPUT -p tcp --dport 12611 -j ACCEPT</span><br><span class="line">iptables -I INPUT -p tcp --dport 443 -j ACCEPT</span><br><span class="line">iptables -I INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">节点对应的端口也要放行</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果出现此提示代表完成<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMXZztThM3mVJwr6wyHLJRm-_DDCOAAAtrEMRu68OFVs07ph3zgzZIBAAMCAAN4AAM2BA" alt="x-ui_2024-11-18_22-46-23.png"></p><blockquote><p>或者关闭防火墙</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">关闭防火墙：</span><br><span class="line">sudo ufw disable</span><br><span class="line">关闭防火墙： sudo ufw 禁用</span><br><span class="line"></span><br><span class="line">查看防火墙状态：</span><br><span class="line">sudo ufw status</span><br></pre></td></tr></table></figure><h1 id="五、登录X-UI面板，添加vmess"><a href="#五、登录X-UI面板，添加vmess" class="headerlink" title="五、登录X-UI面板，添加vmess"></a>五、登录X-UI面板，添加vmess</h1><p><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMYZztUujnbigwDVcn-_tcRUB9oXDIAAt_EMRu68OFV2ZR5oYkJCxsBAAMCAAN5AAM2BA" alt="vmess_2024-11-18_22-52-11.png"></p><blockquote><p>此处需登录vps，放行添加的端口 iptables -I INPUT -p tcp –dport 27950 -j ACCEPT</p></blockquote><h1 id="五、开启bbr加速"><a href="#五、开启bbr加速" class="headerlink" title="五、开启bbr加速"></a>五、开启bbr加速</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：&gt; x-ui</span><br><span class="line">选择：&gt; 23. Enable BBR</span><br><span class="line">如果成功则提示：&gt; BBR has been enabled successfully.</span><br></pre></td></tr></table></figure><p>参考文献：<a href="https://github.com/kjfx/v2ray1/releases/tag/3x-ui">https://github.com/kjfx/v2ray1/releases/tag/3x-ui</a></p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Mac安装HomeBrew-使用国内镜像</title>
      <link href="/2024/11/18/Mac%E5%AE%89%E8%A3%85HomeBrew-%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/"/>
      <url>/2024/11/18/Mac%E5%AE%89%E8%A3%85HomeBrew-%E4%BD%BF%E7%94%A8%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="步骤一"><a href="#步骤一" class="headerlink" title="步骤一"></a>步骤一</h1><blockquote><p>Mac电脑如何打开终端：command+空格 在聚焦搜索中输入terminal回车。</p></blockquote><h1 id="步骤二"><a href="#步骤二" class="headerlink" title="步骤二"></a>步骤二</h1><p>终端中粘贴下方命令回车：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)&quot;</span><br></pre></td></tr></table></figure><p>此处如果提示安装xcode，提示安装完成后，copy上面命令再次安装，选择 gitee镜像。</p><h1 id="步骤三"><a href="#步骤三" class="headerlink" title="步骤三"></a>步骤三</h1><p>安装成功后，再terminal窗口输入 brew 命令进行验证。</p><blockquote><p>记得保存使用推荐的alibaba镜像</p></blockquote><h1 id="卸载homeBrew"><a href="#卸载homeBrew" class="headerlink" title="卸载homeBrew"></a>卸载homeBrew</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh)&quot;</span><br></pre></td></tr></table></figure><h1 id="Homebrew-官方地址"><a href="#Homebrew-官方地址" class="headerlink" title="Homebrew 官方地址"></a>Homebrew 官方地址</h1><p><a href="https://brew.sh/zh-cn/">https://brew.sh/zh-cn/</a><br>官方地址使用github的源，国内访问速度很慢，<em>很容易出错</em>，所以我们需要使用国内的源。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>以注解的方式实现Redis会话token同步</title>
      <link href="/2024/11/08/%E4%BB%A5%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0Redis%E4%BC%9A%E8%AF%9Dtoken%E5%90%8C%E6%AD%A5/"/>
      <url>/2024/11/08/%E4%BB%A5%E6%B3%A8%E8%A7%A3%E7%9A%84%E6%96%B9%E5%BC%8F%E5%AE%9E%E7%8E%B0Redis%E4%BC%9A%E8%AF%9Dtoken%E5%90%8C%E6%AD%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h1><p> 公司内部支付管理系统A和第三支付的管理系统B。大部分功能有雷同。现在需要开发一个A &#x2F; B系统的公共需求。A开发完成之后，B调用A的feign接口。减少开发成本。但是A系统的用户token redis和B系统的用户token redis是分开的。<br> 现在需要在B系统调用A系统的feign接口同时将用户token同步到A的redis。</p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ThreadLocalUtils</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ThreadLocal&lt;Map&lt;String, Object&gt;&gt; threadLocal = <span class="keyword">new</span> <span class="title class_">ThreadLocal</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (map == <span class="literal">null</span>) &#123;</span><br><span class="line">            map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">            threadLocal.set(map);</span><br><span class="line">        &#125;</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">get</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> map.get(key);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">remove</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        Map&lt;String, Object&gt; map = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (map != <span class="literal">null</span>) &#123;</span><br><span class="line">            map.remove(key);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">        threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TokenCachedInterceptor</span> <span class="keyword">implements</span> <span class="title class_">HandlerInterceptor</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UserContext userContext;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> RedisTemplate redisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">            <span class="type">HandlerMethod</span> <span class="variable">method</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">            <span class="type">TokenCached</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getMethodAnnotation(TokenCached.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line"><span class="comment">//                UUID uuid = UUID.randomUUID();</span></span><br><span class="line"><span class="comment">//                UUIDRequestContext.setUUID(request, uuid);</span></span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Tb-Token&quot;</span>);</span><br><span class="line">                log.info(<span class="string">&quot;tb-token:&#123;&#125;,sessionUser:&#123;&#125;&quot;</span>,token, JSON.toJSONString(userContext.getUser()));</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotEmpty(token)) &#123;</span><br><span class="line">                    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> annotation.prefix() + token;</span><br><span class="line">                    log.info(<span class="string">&quot;cacheSessionUser redisKey:&#123;&#125;&quot;</span>,redisKey);</span><br><span class="line">                    redisTemplate.opsForValue().set(redisKey, JSON.toJSONString(userContext.getUser()), <span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">if</span> (handler <span class="keyword">instanceof</span> HandlerMethod) &#123;</span><br><span class="line">            <span class="type">HandlerMethod</span> <span class="variable">method</span> <span class="operator">=</span> (HandlerMethod) handler;</span><br><span class="line">            <span class="type">TokenCached</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getMethodAnnotation(TokenCached.class);</span><br><span class="line">            <span class="keyword">if</span> (annotation != <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">token</span> <span class="operator">=</span> request.getHeader(<span class="string">&quot;Tb-Token&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.isNotEmpty(token)) &#123;</span><br><span class="line">                    <span class="comment">//UUID uuid = UUIDRequestContext.getUUID();</span></span><br><span class="line">                    <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> annotation.prefix() + token;</span><br><span class="line">                    log.info(<span class="string">&quot;reset expire cacheSessionUser redisKey:&#123;&#125;&quot;</span>,redisKey);</span><br><span class="line">                    extendExpiration(redisKey,<span class="number">30</span>, TimeUnit.SECONDS);</span><br><span class="line">                    log.info(<span class="string">&quot;重置缓存过期时间:&#123;&#125;&quot;</span>,redisKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">extendExpiration</span><span class="params">(String key, <span class="type">long</span> timeout, TimeUnit timeUnit)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">hasKey</span> <span class="operator">=</span> redisTemplate.hasKey(key);</span><br><span class="line">        <span class="keyword">if</span> (hasKey != <span class="literal">null</span> &amp;&amp; hasKey) &#123;</span><br><span class="line">            redisTemplate.expire(key, timeout, timeUnit);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebMvcConfigurer</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> TokenCachedInterceptor tokenCachedInterceptor;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> &#123;</span><br><span class="line">        registry.addInterceptor(tokenCachedInterceptor);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FeignRequestInterceptor</span> <span class="keyword">implements</span> <span class="title class_">RequestInterceptor</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">apply</span><span class="params">(RequestTemplate template)</span> &#123;</span><br><span class="line">        <span class="comment">//判断是否是主线程</span></span><br><span class="line">        <span class="keyword">if</span> (ObjectUtil.isNotEmpty(RequestContextHolder.getRequestAttributes()))&#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//将当前线程的请求头注入到request中</span></span><br><span class="line">        <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> (HttpHeaders) ThreadLocalUtils.get(<span class="string">&quot;headers&quot;</span>);</span><br><span class="line">        template.header(<span class="string">&quot;Tb-Token&quot;</span>, headers.get(<span class="string">&quot;Tb-Token&quot;</span>));</span><br><span class="line">        log.info(<span class="string">&quot;异步线程封装Tb-Token:&#123;&#125;&quot;</span>,headers.get(<span class="string">&quot;Tb-Token&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> TokenCached &#123;</span><br><span class="line">    String <span class="title function_">prefix</span><span class="params">()</span> <span class="keyword">default</span> <span class="string">&quot;mjs:sso:login:token:admin_v1:&quot;</span>; <span class="comment">// Redis Key 前缀</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="对应controller代码实现"><a href="#对应controller代码实现" class="headerlink" title="对应controller代码实现"></a>对应controller代码实现</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/sendApply&quot;)</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SendApplyController</span> &#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> SendApplyApi sendApplyApi;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@PostMapping(value = &quot;/v1/add&quot;)</span></span><br><span class="line">    <span class="meta">@TokenCached</span></span><br><span class="line">    <span class="keyword">public</span> ResponseVO <span class="title function_">add</span><span class="params">(<span class="meta">@RequestBody</span> SendApplyPermissionDto dto)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> sendApplyApi.add(dto);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Redis使用规范</title>
      <link href="/2024/10/23/Redis%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/"/>
      <url>/2024/10/23/Redis%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="一、redis使用注意事项"><a href="#一、redis使用注意事项" class="headerlink" title="一、redis使用注意事项"></a>一、redis使用注意事项</h1><hr><p>1、key统一命名前缀： mjs_bill_3_ , 数字3为header头中SaasID的值</p><p>2、key避免过长，不超过30个字符</p><p>3、string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000</p><p>4、禁止代码中调用redis命令keys、flushall、flushdb等</p><p>5、禁止使用redis消息队列，应使用消息中间件RabbitMQ或kafka</p><p>6、value均使用string型存储，避免对象修改造成反序列化异常</p><p>7、所有缓存数据必须设置过期时间</p><h1 id="二、键值设计"><a href="#二、键值设计" class="headerlink" title="二、键值设计"></a>二、键值设计</h1><hr><ol><li>key名设计<br>(1)【建议】: 可读性和可管理性<br>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id</li></ol><p>ugc:video:1<br>(2)【建议】：简洁性<br>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：</p><p>user:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}。<br>(3)【强制】：不要包含特殊字符<br>反例：包含空格、换行、单双引号以及其他转义字符</p><ol start="2"><li>value设计<br>(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)<br>string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</li></ol><p>反例：一个包含200万个元素的list。</p><p>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除</p><p>(2)【推荐】：选择适合的数据类型。<br>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)</p><p>3.【推荐】：控制key的生命周期，redis不是垃圾桶。<br>建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</p><h1 id="三、命令使用"><a href="#三、命令使用" class="headerlink" title="三、命令使用"></a>三、命令使用</h1><hr><p>1.【推荐】 O(N)命令关注N的数量<br>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p><p>2.【推荐】：禁用命令<br>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p><p>3.【推荐】合理使用select<br>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p><p>4.【推荐】使用批量操作提高效率<br>原生命令：例如mget、mset。<br>非原生命令：可以使用pipeline提高效率。<br>但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。</p><h1 id="四、Redis基础入门"><a href="#四、Redis基础入门" class="headerlink" title="四、Redis基础入门"></a>四、Redis基础入门</h1><hr><p>一、redis简介</p><p> 1）redis是一个开源的、基于C语言开发的内存数据库</p><p> 2）redis是一种key-value存储系统，支持数据类型包括String、List、Set、Hash等</p><p> 3）redis是当前最热门的No-SQL系统之一</p><p> 4）redis提供了多种语言的api</p><p> 5）性能非常高，单节点TPS可达10W</p><p> 6）支持持久化</p><p>中文网: <a href="http://www.redis.cn/">http://www.redis.cn/</a></p><p>二、redis安装</p><p>yum官方源里没有redis，所以采用手动源码安装</p><p>1）上传redis安装包到linux任意目录下，解压tar xvf redis-5.6.7.tar.gz<br>2）安装gcc（redis安装依赖C语言环境，需要先安装GCC）<br>       yum install -y gcc<br>3) 进入解压后的redis目录下，执行编译操作<br>      make<br>4）执行安装命令</p><pre><code> make install</code></pre><p>三、redis配置</p><p>1）在redis目录下，新建conf文件夹，将redis.conf配置文件复制到conf目录下<br>mkdir conf;cp redis.conf .&#x2F;conf<br>2）修改redis.conf配置文件，将daemonize改为yes<br> 将bind 127.0.0.1注释掉，protected-mode改为no</p><p>四、redis启动</p><p>1）先启动server,在conf目录下，执行redis-server .&#x2F;redis.conf<br>2）使用客户端登录redis，默认连接的是6379端口的redis实例<br>  redis-cli -p 6379<br>3）关闭redis-server<br>redis-cli shutdown</p><p>五、redis数据类型</p><p>1）对String数据类型的操作</p><pre><code> set key value:给名称为key的String值赋值为value get key:返回名称为key的value值</code></pre><p>2）对list数据类型的操作</p><pre><code>rpush key value  在名称为key的list尾部添加一个值为valuelpush key value  在名称为key的list头部添加一个值为valuellen key 返回名称为key的list的长度lrange key start end:返回名称为key的list中start至end之间的元素lset key index value 给名称为key的list中index位置的元素赋值为value rpop:返回并删除名称为key的list中的尾元素</code></pre><p>3）对Hash数据类型的操作</p><pre><code> hset key field value  向名称为key的hash中添加元素 field&lt;-&gt; value hget key field 返回名称为key的hash中field对应的value hgetall key 返回名称为key的hash中所有建（field）及其对应的valuehlen key 返回名称为key的hash中元素个数hdel key field 删除名称为key中键为field的域</code></pre><p>4）对全局value的操作</p><pre><code>exists key 确认一个key是否存在del key 删除一个keytype key 返回值的类型keys pattern 返回满足给定pattern的所有keydbsize 返回当前数据库中key的数目select dbindex 切换数据库flushdb 删除当前选择数据库中所有的key</code></pre><p>六、redis多实例部署</p><p>由于redis服务端是单线程实现的，因此只能占用CPU的单核，为了充分利用CPU资源，可以在一台服务器上同时启动多个redis-server实例</p><p>配置方法：<br> 1）每个实例创建一个conf文件<br> 2）修改每个conf文件中的端口号<br> 3）启动不同实例时指定不同的配置文件</p><p>七、redis主从</p><p>  在redis的conf文件中，配置上slaveof 127.0.0.1 6379，重启redis</p><p>八、redis其他配置</p><p>  maxclient 最大连接数</p><p>  maxmemory</p><p>  requirepass 设置密码    redis-cli -p 6379 -a lucius123</p><p> 当主redis里配置了密码，从redis是不能同步的，从redis中必须配置主redis的密码，否则数据无法完成同步，在从redis的配置文件中设置masterauth参数为主redis设置的密码。</p><p>九、项目整合redis</p><p>1）修改配置文件<br>2）修改redis的host、port、password<br>3）访问环境整合接口<br>系统中使用了缓存+数据库<br>先从缓存读数据，如果有，直接返回数据；如果没有，去数据库读，然后再插入到缓存中，再返回数据</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>RedisUtil工具类</title>
      <link href="/2024/10/23/RedisUtil%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2024/10/23/RedisUtil%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="Redis工具组件"><a href="#Redis工具组件" class="headerlink" title="Redis工具组件"></a>Redis工具组件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//redis工具类</span></span><br><span class="line"><span class="meta">@UtilityClass</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisUtils</span> &#123;</span><br><span class="line">    <span class="keyword">private</span>  RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span>  RedisTemplate&lt;String, String&gt; stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisService <span class="title function_">getRedisService</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(redisService==<span class="literal">null</span>)&#123;</span><br><span class="line">            redisService=SpringContextHolder.getBean(RedisService.class);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> redisService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, Object&gt; <span class="title function_">getRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> SpringContextHolder.getBean(<span class="string">&quot;redisTemplate&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;String, String&gt; <span class="title function_">getStringRedisTemplate</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(stringRedisTemplate==<span class="literal">null</span>)&#123;</span><br><span class="line">            stringRedisTemplate=SpringContextHolder.getBean(<span class="string">&quot;stringRedisTemplate&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashGet</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGet</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; ops = getRedisTemplate().opsForHash();</span><br><span class="line">        <span class="keyword">return</span> ops.get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 向一张hash表中放入数据,如果不存在将创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key   键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item  项</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value 值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time  时间(秒)  注意:如果已存在的hash表有时间,这里将会替换原有的时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hSet</span><span class="params">(String key, String item, Object value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HashOperations&lt;String, Object, Object&gt; ops = getRedisTemplate().opsForHash();</span><br><span class="line">            ops.put(key, item, value);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;hSet err&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 指定缓存失效时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">expire</span><span class="params">(String key, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                getRedisTemplate().expire(key, time, TimeUnit.SECONDS);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;expire err&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis  string类型 存储方法</span></span><br><span class="line"><span class="comment">     * kc:1:appName:key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     自定义key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   存储的字符串</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> timeout 超时时间</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStringValue</span><span class="params">(String key, String value, <span class="type">long</span> timeout, TimeUnit unit)</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; vo = getStringRedisTemplate().opsForValue();</span><br><span class="line">        vo.set(getRedisService().getFormatKey(key), value, timeout, unit);</span><br><span class="line">        vo.set(getRedisService().getFormatKey(key), value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis  string类型 存储方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     自定义key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   存储的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStringValue</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; vo = getStringRedisTemplate().opsForValue();</span><br><span class="line">        vo.set(getRedisService().getFormatKey(key), value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis  string类型 存储方法</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     自定义key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value   存储的字符串</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setStringVal</span><span class="params">(String key, String value)</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; vo = getStringRedisTemplate().opsForValue();</span><br><span class="line">        vo.set(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis  string类型 存储方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     自定义key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStringValue</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; vo = getStringRedisTemplate().opsForValue();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> vo.get(getRedisService().getFormatKey(key));</span><br><span class="line">        log.info(<span class="string">&quot;获取&#123;&#125;=&#123;&#125;&quot;</span>,getFormatKey(key),s);</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置key并设置过期时间</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">setIfAbsent</span><span class="params">(String key, String value, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getStringRedisTemplate().opsForValue().setIfAbsent(key, value, time, TimeUnit.SECONDS);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * redis  string类型 存储方法</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key     自定义key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getStringVal</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        ValueOperations&lt;String, String&gt; vo = getStringRedisTemplate().opsForValue();</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> vo.get(key);</span><br><span class="line">        <span class="keyword">if</span>(log.isDebugEnabled())&#123;</span><br><span class="line">            log.debug(<span class="string">&quot;获取&#123;&#125;=&#123;&#125;&quot;</span>,key,s);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除hash表中的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 可以使多个 不能为null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">hDel</span><span class="params">(String key, Object... item)</span> &#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; ops = getStringRedisTemplate().opsForHash();</span><br><span class="line">        ops.delete(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断hash表中是否有该项的值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true 存在 false不存在</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hHasKey</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; ops = getStringRedisTemplate().opsForHash();</span><br><span class="line">        <span class="keyword">return</span> ops.hasKey(key, item);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * HashSet 并设置时间</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map  对应多个键值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> time 时间(秒)</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> true成功 false失败</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">hMSet</span><span class="params">(String key, Map&lt;String, Object&gt; map, <span class="type">long</span> time)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HashOperations&lt;String, Object, Object&gt; ops = getStringRedisTemplate().opsForHash();</span><br><span class="line">            ops.putAll(key, map);</span><br><span class="line">            <span class="keyword">if</span> (time &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                expire(key, time);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;hMSet err&#123;&#125;&quot;</span>,e.getMessage());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hMGetStr 批量获取redis hash得值</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;Object&gt; <span class="title function_">hMGetStr</span><span class="params">(String key, List&lt;Object&gt; item)</span> &#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; ops = getStringRedisTemplate().opsForHash();</span><br><span class="line">        List&lt;Object&gt; objects = ops.multiGet(key, item);</span><br><span class="line">        <span class="keyword">return</span> objects;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 获取hashKey对应的所有键值</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@param</span> key 键</span></span><br><span class="line"><span class="comment">    * <span class="doctag">@return</span> 对应的多个键值</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">public</span> Map&lt;Object, Object&gt; <span class="title function_">hMGet</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; ops = getStringRedisTemplate().opsForHash();</span><br><span class="line">        <span class="keyword">return</span> ops.entries(key);</span><br><span class="line">    &#125;    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * hGetStr</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key  键 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> item 项 不能为null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">hGetStr</span><span class="params">(String key, String item)</span> &#123;</span><br><span class="line">        HashOperations&lt;String, Object, Object&gt; ops = getStringRedisTemplate().opsForHash();</span><br><span class="line">        <span class="keyword">return</span> ops.get(key, item);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>电报图床利用Cloudflare免费搭建</title>
      <link href="/2024/10/12/%E7%94%B5%E6%8A%A5%E5%9B%BE%E5%BA%8A%E5%88%A9%E7%94%A8Cloudflare%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA/"/>
      <url>/2024/10/12/%E7%94%B5%E6%8A%A5%E5%9B%BE%E5%BA%8A%E5%88%A9%E7%94%A8Cloudflare%E5%85%8D%E8%B4%B9%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h1 id="Fork代码到自己个gitHub库。telegraph-Image"><a href="#Fork代码到自己个gitHub库。telegraph-Image" class="headerlink" title="Fork代码到自己个gitHub库。telegraph-Image"></a>Fork代码到自己个gitHub库。telegraph-Image</h1><p>代码地址：(<a href="https://github.com/x-dr/telegraph-Image/tree/static">https://github.com/x-dr/telegraph-Image/tree/static</a>)</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li><p>无限图片储存数量，你可以上传不限数量的图片</p></li><li><p>无需购买服务器，托管于Cloudflare的网络上，当使用量不超过Cloudflare的免费额度时，完全免费</p></li><li><p>无需购买域名，可以使用Cloudflare Pages提供的*.pages.dev的免费二级域名，同时也支持绑定自定义域名</p></li><li><p>支持图片审查API，可根据需要开启，开启后不良图片将自动屏蔽，不再加载</p></li><li><p>支持后台图片管理，日志管理，查看访问前20的Referer、IP、img,可以对上传的图片进行在线预览，添加白名单，黑名单等操作</p></li></ol><h2 id="利用Cloudflare-pages部署"><a href="#利用Cloudflare-pages部署" class="headerlink" title="利用Cloudflare pages部署"></a>利用Cloudflare pages部署</h2><ol><li>Pages 部署 telegraph-Image 项目</li></ol><ul><li>打开telegraph-Image仓库项目，先给作者点击Star后再点击Fork！可以增加成功率！</li><li>回到 Workers 和 Pages &gt; 概述 &gt; 创建 &gt; Pages &gt; 连接到Git &gt; 选择telegraph-Image项目 &gt; 保存并部署即可</li></ul><ol start="2"><li>绑定自定义域</li></ol><ul><li>这里推荐优先使用已经转入CF的域名，并开启小黄云。如果你没有域名，也可以退而求其次使用CNAME方式使用免费域名接入自定义域。</li><li>回到 Workers 和 Pages &#x2F;telegraph-Image项目 &gt; 设置 &gt; 函数 &gt; 放置 &gt; 制作 &gt; 智能 &gt; 保存</li></ul><ol start="3"><li>创建管理后台</li></ol><ul><li>3.1 回到 Workers 和 Pages &gt; D1 &gt; 创建数据库 &gt; 仪表盘 &gt; 数据库名称img(名称可取任意值) &gt; 创建</li><li>3.2 进入img数据库 &gt; 控制台 &gt; 粘贴以下代码后 &gt; 点击执行 &gt; 等待提示此查询已成功执行。<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> tgimglog;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> tgimglog (</span><br><span class="line">    `id` <span class="type">integer</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `url` text,</span><br><span class="line">    `referer` text,</span><br><span class="line">    `ip` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    `<span class="type">time</span>` <span class="type">DATE</span></span><br><span class="line">);</span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> imginfo;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> imginfo (</span><br><span class="line">    `id` <span class="type">integer</span> <span class="keyword">PRIMARY</span> KEY <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">    `url` text,</span><br><span class="line">    `referer` text,</span><br><span class="line">    `ip` <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">    `rating` text,</span><br><span class="line">    `total` <span class="type">integer</span>,</span><br><span class="line">    `<span class="type">time</span>` <span class="type">DATE</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure></li><li>3.3 回到 Workers 和 Pages &#x2F;telegraph-Image项目 &gt; 设置 &gt; 函数 &gt; D1 数据库绑定 &gt; 变量名IMG &gt; img数据库 &gt; 点击保存</li><li>3.4 回到 Workers 和 Pages &#x2F;telegraph-Image项目 &gt; 设置 &gt; 环境变量 &gt; 为生产环境定义变量 &gt; 变量内容如下:</li><li>变量名BASIC_USER，值为你的后台管理员用户名</li><li>变量名BASIC_PASS，值为你的后台管理员密码</li><li>无需审查涩涩内容可跳过这一步</li><li>打开ModerateContent API申请页面，输入你的邮箱后点击SUBMIT</li><li>前往你的邮箱将 ModerateContent.com Sup 邮件内的 API Key 复制出来</li><li>变量名ModerateContentApiKey，值为你的 API Key</li><li>点击<code>保存</code></li><li>3.5 回到 Workers 和 Pages &#x2F;telegraph-Image项目 &gt;  部署 &gt; 右下角三个点 &gt; 重试部署即可</li></ul><ol start="4"><li>如何使用</li></ol><ul><li>例如：你的 Pages自定义域 为img.131213.xyz</li><li><a href="https://img.131213.xyz/">https://img.131213.xyz</a> 为 图床上传使用地址</li><li><a href="https://img.131213.xyz/admin">https://img.131213.xyz/admin</a> 为 图床后台管理地址</li><li><a href="https://img.131213.xyz/list">https://img.131213.xyz/list</a> 为 图床访问日志</li></ul><h2 id="变量说明"><a href="#变量说明" class="headerlink" title="变量说明"></a>变量说明</h2><blockquote><p><code>ModerateContentApiKey</code> 请前往 [<a href="https://moderatecontent.com/]">https://moderatecontent.com/]</a> (<a href="https://moderatecontent.com/)%E6%B3%A8%E5%86%8C%E5%85%8D%E8%B4%B9%E8%8E%B7%E5%8F%96API">https://moderatecontent.com/)注册免费获取API</a> key</p></blockquote><table><thead><tr><th>变量名称</th><th>值</th></tr></thead><tbody><tr><td>BASIC_USER</td><td>&lt;后台管理页面登录用户名称&gt;</td></tr><tr><td>BASIC_PASS</td><td>&lt;后台管理页面登录用户密码&gt;</td></tr><tr><td>ModerateContentApiKey</td><td>&lt;审查图像内容的API key&gt;</td></tr><tr><td>RATINGAPI</td><td>&lt;<a href="https://github.com/x-dr/nsfwjs-api">自建的鉴黄api</a> &gt;</td></tr><tr><td>TG_BOT_TOKEN</td><td>刚才获得的机器人Token</td></tr><tr><td>TG_CHAT_ID</td><td>刚才获得的频道ID</td></tr></tbody></table><blockquote><p>优先级 <code>RATINGAPI</code> &gt; <code>ModerateContentApiKey</code></p></blockquote><blockquote><p><code>RATINGAPI</code>的格式 <code>https://xxx.xxx/rating</code></p></blockquote><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>若依框架新增自定义模块接口404问题</title>
      <link href="/2024/10/11/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E6%96%B0%E5%A2%9E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3404%E9%97%AE%E9%A2%98/"/>
      <url>/2024/10/11/%E8%8B%A5%E4%BE%9D%E6%A1%86%E6%9E%B6%E6%96%B0%E5%A2%9E%E8%87%AA%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%9D%97%E6%8E%A5%E5%8F%A3404%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h1><ol><li>在父目录pom.xml文件下导入新增模块依赖</li><li>在子模块ruoyi-admin中导入新增依赖</li><li>新模块增加ruoyi-common配置，或按需通过maven配置依赖（<code>common</code>–&gt;<code>system</code>–&gt;<code>framework</code>，导入framework依赖）</li><li>重新打包编译</li></ol><h1 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h1><ol><li>进入ruoyi-admin启动类</li><li>在核心注解SpringBootApplication中添加<code>scanBasePackages</code> &#x3D; <code>&#123;“包名称”,“com.ruoyi”&#125;</code><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication(scanBasePackages = &#123;&quot;com.mjs&quot;, &quot;com.ruoyi&quot;&#125;)</span></span><br></pre></td></tr></table></figure> 前面的是新增模块包名，后面的是若依框架包名</li><li>新增<code>@MapperScan（&quot;com.example.newmodule.mapper&quot;）</code>如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperScan(&quot;com.mjs.mes.**.mapper&quot;)</span></span><br></pre></td></tr></table></figure></li></ol><ul><li>补充：如果还是出现404的情况，就只需要打开<code>SecurityConfig.java</code>添加如下代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/mjs/**&quot;</span>).permitAll() 即可**</span><br><span class="line"><span class="string">&quot;/mjs/**&quot;</span> 是controller中<span class="meta">@RequestMapping</span>的路径</span><br></pre></td></tr></table></figure>这样做可以确保新模块的认证通过，不再出现401认证失败的问题。<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMJZwo-uSP5Om_3nLnjmdscaDHQjE8AAtm8MRvYUFFUCoMEdKuww1MBAAMCAAN5AAM2BA" alt="mjsss_2024-10-11_22-46-14.png"><div class="video-container">[up主专用，视频内嵌代码贴在这]</div></li></ul><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>值得珍藏的4K高清壁纸网站推荐</title>
      <link href="/2024/09/22/%E5%80%BC%E5%BE%97%E7%8F%8D%E8%97%8F%E7%9A%844K%E9%AB%98%E6%B8%85%E5%A3%81%E7%BA%B8%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/"/>
      <url>/2024/09/22/%E5%80%BC%E5%BE%97%E7%8F%8D%E8%97%8F%E7%9A%844K%E9%AB%98%E6%B8%85%E5%A3%81%E7%BA%B8%E7%BD%91%E7%AB%99%E6%8E%A8%E8%8D%90/</url>
      
        <content type="html"><![CDATA[<h1 id="12个值得珍藏的高清壁纸网站，请尽情享用"><a href="#12个值得珍藏的高清壁纸网站，请尽情享用" class="headerlink" title="12个值得珍藏的高清壁纸网站，请尽情享用"></a>12个值得珍藏的高清壁纸网站，请尽情享用</h1><p>分享12个提供高质量、多样化的高清桌面壁纸网站，包括WallpaperAbyss、AwesomeWallpapers、Desktopwallpapershd等，涵盖了摄影、创意、游戏、电影等多种主题，分辨率高达8K，适用于电脑和手机，让你轻松找到赏心悦目的壁纸。</p><h2 id="1-Wallpaper"><a href="#1-Wallpaper" class="headerlink" title="1. Wallpaper"></a>1. Wallpaper</h2><p>网址: <a href="https://wall.alphacoders.com/finding_wallpapers.php#lang=Chinese">https://wall.alphacoders.com/finding_wallpapers.php#lang=Chinese</a><br>这是一个国外的壁纸网站，绝大部分的壁纸都是超清、4K的，而且壁纸的质量都很高。</p><h2 id="2-Awesome-Wallpapers-wallhaven-cc"><a href="#2-Awesome-Wallpapers-wallhaven-cc" class="headerlink" title="2. Awesome Wallpapers - wallhaven.cc"></a>2. Awesome Wallpapers - wallhaven.cc</h2><p>网址：<a href="https://alpha.wallhaven.cc/">https://alpha.wallhaven.cc/</a><br>图片丰富，质量很高，分为通用、动漫、人物三大类，可以按屏幕比例和分辨率检索。</p><h2 id="3-Desktop-wallpapers-hd-free-desktop-backgrounds"><a href="#3-Desktop-wallpapers-hd-free-desktop-backgrounds" class="headerlink" title="3. Desktop wallpapers hd, free desktop backgrounds"></a>3. Desktop wallpapers hd, free desktop backgrounds</h2><p>网址：<a href="https://wallpaperscraft.com/">https://wallpaperscraft.com/</a><br>类型丰富，左侧显示有图片分类，支持安卓和 iOS 客户端。</p><h2 id="4-Beautiful-Free-Images-Unsplash"><a href="#4-Beautiful-Free-Images-Unsplash" class="headerlink" title="4. Beautiful Free Images | Unsplash"></a>4. Beautiful Free Images | Unsplash</h2><p>网址：<a href="https://unsplash.com/">https://unsplash.com/</a><br>：以摄影作品为主，图片分辨率和尺寸很多，有的尺寸不适合做壁纸，需要挑选。</p><h2 id="5-极简壁纸-海量电脑桌面壁纸美图"><a href="#5-极简壁纸-海量电脑桌面壁纸美图" class="headerlink" title="5. 极简壁纸_海量电脑桌面壁纸美图"></a>5. 极简壁纸_海量电脑桌面壁纸美图</h2><p>网址：<a href="https://bz.zzzmh.cn/">https://bz.zzzmh.cn/</a><br>创意、摄影、自然、人物、二次元，图片来源自 WallHaven，进行了重新分类，国内速度较好。</p><h2 id="6-Simple-Desktops"><a href="#6-Simple-Desktops" class="headerlink" title="6. Simple Desktops"></a>6. Simple Desktops</h2><p>网址：<a href="http://simpledesktops.com/">http://simpledesktops.com/</a><br>极简风格，支持 Mac、iOS、安卓客户端。</p><h2 id="7-Best-Wallpaper-Site-for-HD-4K-Wallpapers"><a href="#7-Best-Wallpaper-Site-for-HD-4K-Wallpapers" class="headerlink" title="7. Best Wallpaper Site for HD, 4K Wallpapers"></a>7. Best Wallpaper Site for HD, 4K Wallpapers</h2><p>网址：<a href="https://wallpapersite.com/">https://wallpapersite.com/</a><br>适合桌面和手机，按分类检索，支持安卓客户端。</p><h2 id="8-GameWallpapers-com"><a href="#8-GameWallpapers-com" class="headerlink" title="8. GameWallpapers.com"></a>8. GameWallpapers.com</h2><p>网址：<a href="https://www.gamewallpapers.com/">https://www.gamewallpapers.com/</a><br>游戏专题壁纸，有专门的宽屏、双屏和多屏壁纸。</p><h2 id="9-CGWallpapers-com"><a href="#9-CGWallpapers-com" class="headerlink" title="9. CGWallpapers.com"></a>9. CGWallpapers.com</h2><p>网址：<a href="https://www.cgwallpapers.com/">https://www.cgwallpapers.com/</a><br>CG 动画专题壁纸，有专门的宽屏、双屏和多屏壁纸。</p><h2 id="10-Wallpaper-Cave"><a href="#10-Wallpaper-Cave" class="headerlink" title="10. Wallpaper Cave"></a>10. Wallpaper Cave</h2><p>网址：<a href="https://wallpapercave.com/">https://wallpapercave.com/</a><br>风格偏清新明丽，主页按类型和主题将壁纸分为各个小类，有的类别挺小众有趣的，桌面和手机壁纸都有。</p><h2 id="11-Moviemania-Textless-high-resolution-movie-wallpapers"><a href="#11-Moviemania-Textless-high-resolution-movie-wallpapers" class="headerlink" title="11.  Moviemania - Textless high-resolution movie wallpapers"></a>11.  Moviemania - Textless high-resolution movie wallpapers</h2><p>网址：<a href="https://www.moviemania.io/">https://www.moviemania.io/</a><br>互联网上最大的无文字高分辨率电影壁纸库，支持桌面和手机。</p><h2 id="12-哲风壁纸"><a href="#12-哲风壁纸" class="headerlink" title="12. 哲风壁纸"></a>12. 哲风壁纸</h2><p>网址：<a href="https://haowallpaper.com/">https://haowallpaper.com/</a><br>炫酷风格，分为通用、动漫、人物三大类。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>常用工具组件</title>
      <link href="/2024/08/28/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81%E7%BB%84%E4%BB%B6/"/>
      <url>/2024/08/28/%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E4%BB%A3%E7%A0%81%E7%BB%84%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="IPV4-V6校验合法"><a href="#IPV4-V6校验合法" class="headerlink" title="IPV4&#x2F;V6校验合法"></a>IPV4&#x2F;V6校验合法</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isIP</span><span class="params">(String ip)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">ipReg</span> <span class="operator">=</span> <span class="string">&quot;^((1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])|\\*)\\.&quot;</span></span><br><span class="line">            + <span class="string">&quot;((1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)|\\*)\\.&quot;</span></span><br><span class="line">            + <span class="string">&quot;((1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|\\d)|\\*)\\.&quot;</span></span><br><span class="line">            + <span class="string">&quot;(1\\d&#123;2&#125;|2[0-4]\\d|25[0-5]|[1-9]\\d|[1-9])$&quot;</span>;</span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">ipPattern</span> <span class="operator">=</span> Pattern.compile(ipReg);</span><br><span class="line">    <span class="keyword">return</span> ipPattern.matcher(ip).matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">isIP</span><span class="params">(String ipAddress)</span>&#123;</span><br><span class="line">    String ip=<span class="string">&quot;(2[5][0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)\\.(25[0-5]|2[0-4]\\d|1\\d&#123;2&#125;|\\d&#123;1,2&#125;)&quot;</span>;</span><br><span class="line">    <span class="type">Pattern</span> <span class="variable">pattern</span> <span class="operator">=</span> Pattern.compile(ip);</span><br><span class="line">    <span class="type">Matcher</span> <span class="variable">matcher</span> <span class="operator">=</span> pattern.matcher(ipAddress);</span><br><span class="line">    <span class="keyword">return</span> matcher.matches();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Boolean <span class="title function_">isIPV6</span><span class="params">(String ip)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ip != <span class="literal">null</span> &amp;&amp; ip.contains(<span class="string">&quot;:&quot;</span>) &amp;&amp; ip.length() &lt; <span class="number">40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><blockquote><p>Java stream 常用排序转化</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用 Stream 排序</span></span><br><span class="line">        list = list.stream().sorted(Comparator.comparing(Person::getAge).reversed()).collect(Collectors.toList());</span><br><span class="line">        </span><br><span class="line"><span class="comment">// 按照[年龄]正序,但年龄中有一个 null 值</span></span><br><span class="line">        list = list.stream().sorted(Comparator.comparing(Person::getAge,</span><br><span class="line">                Comparator.nullsFirst(Integer::compareTo))).collect(Collectors.toList());</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">List&lt;Long&gt; memberIds = list.stream().map(AgentReviewMode::getMemberId).collect(Collectors.toList());</span><br><span class="line">     </span><br><span class="line">List&lt;MemberAgent&gt; memberAgentList = memberAgentMapper.queryMemberAgentByMemberIdList(memberIds, HttpUtils.getSizeId());</span><br><span class="line">Map&lt;Long, MemberAgent&gt; memberAgentMap = memberAgentList.stream().collect(Collectors.toMap(MemberAgent::getMemberId, Function.identity()));</span><br></pre></td></tr></table></figure><h1 id="日志拦截组件"><a href="#日志拦截组件" class="headerlink" title="日志拦截组件"></a>日志拦截组件</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component(&quot;agentControllerLogAspect&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ControllerLogAspect</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserContext userContext;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> RedisService redisService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;agent.cache.default.time:4000&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> defaultCacheTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;response.parameter.length:6000&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> respParameterLength;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;agent.expert.limit.time:30&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> expertLimitTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> Environment environment;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 对于所有返回类型是Response对象的方法,如果执行出错了就封装一下</span></span><br><span class="line">    <span class="meta">@Pointcut(&quot;@within(org.springframework.web.bind.annotation.RestController)&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">responseMethod</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAllFiledValue</span><span class="params">(Object[] obj)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (obj == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; obj.length; i++) &#123;</span><br><span class="line">            buffer.append(getAllFiledValue(obj[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> String <span class="title function_">getAllFiledValue</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">        <span class="type">StringBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;[&quot;</span> + obj.getClass().getSimpleName() + <span class="string">&quot;(&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Field[] fields = ReflectUtil.getFields(obj.getClass());</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; fields.length; i++) &#123;</span><br><span class="line">                <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> fields[i];</span><br><span class="line">                <span class="type">Object</span> <span class="variable">fieldValue</span> <span class="operator">=</span> ReflectUtil.getFieldValue(obj, field);</span><br><span class="line">                <span class="comment">//是否有站点id字段，有进行赋值</span></span><br><span class="line">                <span class="keyword">if</span>(field.getName().equals(<span class="string">&quot;stxx&quot;</span>))&#123;</span><br><span class="line">                    <span class="keyword">if</span>(fieldValue==<span class="literal">null</span>)&#123;</span><br><span class="line">                        fieldValue=HttpUtils.getSizeId();</span><br><span class="line">                    &#125;</span><br><span class="line">                    ReflectUtil.setFieldValue(obj,<span class="string">&quot;stxx&quot;</span>,fieldValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//为空不答应字段</span></span><br><span class="line">                <span class="keyword">if</span>(fieldValue == <span class="literal">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">continue</span>;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(fieldValue <span class="keyword">instanceof</span> String)&#123;</span><br><span class="line">                        <span class="keyword">if</span>(StrUtil.isBlank(Convert.toStr(fieldValue)))&#123;</span><br><span class="line">                            <span class="keyword">continue</span>;</span><br><span class="line">                        &#125;                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//是否包含脱敏关键字,包含进行脱敏</span></span><br><span class="line">                <span class="keyword">if</span>(field.isAnnotationPresent(EncrypField.class))&#123;</span><br><span class="line">                    <span class="keyword">if</span> (fieldValue != <span class="literal">null</span> &amp;&amp; fieldValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                        <span class="type">String</span> <span class="variable">value</span> <span class="operator">=</span> EncryptUtils.encrypt(Convert.toStr(fieldValue));</span><br><span class="line">                        buffer.append(field.getName()).append(<span class="string">&quot;=&quot;</span>).append(value);</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        buffer.append(field.getName()).append(<span class="string">&quot;=&quot;</span>).append(fieldValue);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    buffer.append(field.getName()).append(<span class="string">&quot;=&quot;</span>).append(fieldValue);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (i &lt; fields.length - <span class="number">1</span>) &#123;</span><br><span class="line">                    buffer.append(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;获取参数值出错&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        buffer.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> buffer.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Around(&quot;responseMethod()&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">process</span><span class="params">(ProceedingJoinPoint pjp)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        PageHelper.clearPage();</span><br><span class="line">        <span class="type">MethodSignature</span> <span class="variable">msig</span> <span class="operator">=</span> (MethodSignature) pjp.getSignature();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">target</span> <span class="operator">=</span> pjp.getTarget();</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> target.getClass().getSimpleName() + <span class="string">&quot;.&quot;</span> + msig.getName();</span><br><span class="line">        <span class="type">long</span> <span class="variable">start</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> msig.getMethod();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> HttpUtils.getRequest().getRequestURI();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            log.info(<span class="string">&quot;开始controller-&#123;&#125;,url:&#123;&#125;,参数:&#123;&#125;,请求头&#123;&#125;&quot;</span>, name, HttpUtils.getRequest().getRequestURI(), getAllFiledValue(pjp.getArgs()), HttpUtils.getHeaders());</span><br><span class="line">            <span class="comment">//判断是否带有记录日志注解</span></span><br><span class="line">            <span class="type">long</span> <span class="variable">sTime</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">            <span class="type">OperateLog</span> <span class="variable">annotation</span> <span class="operator">=</span> method.getAnnotation(OperateLog.class);</span><br><span class="line">            <span class="keyword">if</span>(annotation !=<span class="literal">null</span>)&#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">spel</span> <span class="operator">=</span> annotation.operater();</span><br><span class="line">                <span class="type">String</span> <span class="variable">module</span> <span class="operator">=</span> annotation.<span class="keyword">module</span>();</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> SpELUtils.parseSpel(method,pjp.getArgs(), spel);</span><br><span class="line">                <span class="type">String</span> <span class="variable">menu</span> <span class="operator">=</span> SpELUtils.parseSpel(method,pjp.getArgs(), <span class="keyword">module</span>);</span><br><span class="line">                <span class="type">OperateLogInfo</span> <span class="variable">attribute</span> <span class="operator">=</span> (OperateLogInfo)HttpUtils.getRequest().getAttribute(<span class="string">&quot;com.kkcloud.core.component.operaterLog.OperateLogInfo&quot;</span>);</span><br><span class="line">                attribute.setOperater(s);</span><br><span class="line">                attribute.setModule(menu.replaceAll(<span class="string">&quot;[]\\[]&quot;</span>,<span class="string">&quot;&quot;</span>));</span><br><span class="line"><span class="comment">//                log.debug(&quot;解析代理系统操作日志&#123;&#125;,耗时&#123;&#125;, OperateLogInfo:&#123;&#125;&quot; , name,  System.currentTimeMillis() - sTime,attribute.getOperationType());</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;为防止意外捕获一下,打印参数不可能出错的&#123;&#125;&quot;</span>,ex);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 导出限制</span></span><br><span class="line">        <span class="type">ExportLimit</span> <span class="variable">exportLimitAnnotation</span> <span class="operator">=</span> method.getAnnotation(ExportLimit.class);</span><br><span class="line">        <span class="keyword">if</span>(Objects.nonNull(exportLimitAnnotation)) &#123;</span><br><span class="line">            exportLimit();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="type">QueryCache</span> <span class="variable">queryCacheAnnotation</span> <span class="operator">=</span> method.getAnnotation(QueryCache.class);</span><br><span class="line">        Object proceed;</span><br><span class="line">        <span class="keyword">if</span>(Objects.nonNull(queryCacheAnnotation))&#123;</span><br><span class="line">            proceed = cachedata(pjp,name,url,queryCacheAnnotation);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            proceed = pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(Objects.nonNull(exportLimitAnnotation)) &#123;</span><br><span class="line">            <span class="comment">// 删除缓存</span></span><br><span class="line">            RedisUtils.getRedisTemplate().delete(StrUtil.format(Common.EXPERT_LIMIT_LOCK_SITE_KEY, HttpUtils.getSizeId()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">long</span> <span class="variable">time</span> <span class="operator">=</span> System.currentTimeMillis() - start;</span><br><span class="line">            <span class="type">String</span> <span class="variable">requestId</span> <span class="operator">=</span> MDC.get(<span class="string">&quot;requestId&quot;</span>);</span><br><span class="line">            CompletableFuture.runAsync(()-&gt;&#123;</span><br><span class="line">                MDC.put(<span class="string">&quot;requestId&quot;</span>, requestId);</span><br><span class="line">                <span class="type">long</span> <span class="variable">start1</span> <span class="operator">=</span> System.currentTimeMillis();</span><br><span class="line">                <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> JSON.toJSONString(proceed, <span class="keyword">new</span> <span class="title class_">SimpleValueFilter</span>());</span><br><span class="line">                <span class="type">int</span> <span class="variable">endIndex</span> <span class="operator">=</span> s.length();</span><br><span class="line">                <span class="keyword">if</span>(endIndex &gt; respParameterLength)&#123;</span><br><span class="line">                    endIndex = respParameterLength;</span><br><span class="line">                    s = s.substring(<span class="number">0</span>,endIndex)+<span class="string">&quot;...&quot;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                log.info(<span class="string">&quot;controller执行&#123;&#125;,返回数据:&#123;&#125;,耗时&#123;&#125;&quot;</span>, name,s,System.currentTimeMillis() - start1);</span><br><span class="line">            &#125;);</span><br><span class="line">            log.info(<span class="string">&quot;controller执行结束&#123;&#125;,耗时&#123;&#125;&quot;</span>, name,time);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;打印响应参数出错&quot;</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">cachedata</span><span class="params">(ProceedingJoinPoint pjp, String name, String url, QueryCache annotation)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> HttpUtils.getResponse();</span><br><span class="line">        Object proceed;<span class="comment">//过期时间</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">apolloKey</span> <span class="operator">=</span> annotation.value();</span><br><span class="line">            <span class="keyword">if</span> (StrUtil.isBlank(apolloKey)) &#123;</span><br><span class="line">                apolloKey = name;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">String</span> <span class="variable">property</span> <span class="operator">=</span> environment.getProperty(apolloKey);</span><br><span class="line">            <span class="type">long</span> <span class="variable">expiration</span> <span class="operator">=</span> Convert.toLong(property, annotation.timeoutFlag()?annotation.timeout():defaultCacheTime);</span><br><span class="line">            <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</span><br><span class="line">                response.setStatus(HttpStatus.NOT_MODIFIED.value());</span><br><span class="line">                proceed = <span class="literal">null</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                Object[] args = pjp.getArgs();</span><br><span class="line">                <span class="type">String</span> <span class="variable">redisKey</span> <span class="operator">=</span> apolloKey;</span><br><span class="line">                <span class="keyword">if</span> (args.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    Field[] fields = ReflectUtil.getFields(args[<span class="number">0</span>].getClass());</span><br><span class="line">                    Map&lt;String, String&gt; param = <span class="keyword">new</span> <span class="title class_">TreeMap</span>&lt;&gt;();</span><br><span class="line">                    <span class="keyword">for</span> (Field field : fields) &#123;</span><br><span class="line">                        <span class="type">Object</span> <span class="variable">fieldValue</span> <span class="operator">=</span> ReflectUtil.getFieldValue(args[<span class="number">0</span>], field);</span><br><span class="line">                        <span class="keyword">if</span> (fieldValue != <span class="literal">null</span>) &#123;</span><br><span class="line">                            <span class="keyword">if</span> (fieldValue <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">                                <span class="keyword">if</span> (!((String) fieldValue).equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">                                    param.put(field.getName(), fieldValue.toString());</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                param.put(field.getName(), fieldValue.toString());</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">StringBuffer</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">                    <span class="keyword">for</span> (Map.Entry&lt;String, String&gt; entry : param.entrySet()) &#123;</span><br><span class="line">                        sb.append(entry.getKey()).append(<span class="string">&quot;=&quot;</span>).append(entry.getValue()).append(<span class="string">&quot;&amp;&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span> (sb.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                        apolloKey += <span class="string">&quot;:&quot;</span> + MD5Util.getMD5(sb.toString());</span><br><span class="line">                        log.info(<span class="string">&quot;生成缓存key=&#123;&#125;,md5=&#123;&#125;&quot;</span>, sb.toString(), apolloKey);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="type">SessionUser</span> <span class="variable">user</span> <span class="operator">=</span> userContext.getUser();</span><br><span class="line">                    redisKey = StrUtil.format(<span class="string">&quot;&#123;&#125;:nosyncno_&#123;&#125;&quot;</span>, user.getUserName(), apolloKey);</span><br><span class="line">                    <span class="comment">//redisKey = StrUtil.format(&quot;&#123;&#125;:nosyncno_&#123;&#125;&quot;, HttpUtils.getUser().getName(), apolloKey);</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//读取redis中的缓存数据</span></span><br><span class="line">                <span class="comment">//redis 全路径kc:1:kkcloud-agent-client:webRoot:MemberController.queryMemberList:30E7E8A398973117F99BDF8D17E09374</span></span><br><span class="line">                <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> redisService.getValue(redisKey);</span><br><span class="line">                <span class="keyword">if</span> (value != <span class="literal">null</span>) &#123;</span><br><span class="line">                    log.info(<span class="string">&quot;读取缓存数据url=&#123;&#125;&quot;</span>,url);</span><br><span class="line">                    proceed = JSONObject.parseObject(value.toString(), ResponseVO.class);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    proceed = pjp.proceed();</span><br><span class="line">                    <span class="type">SerializeConfig</span> <span class="variable">serializeConfig</span> <span class="operator">=</span> SerializeConfig.getGlobalInstance();</span><br><span class="line">                    serializeConfig.put(Long.class, ToStringSerializer.instance);</span><br><span class="line">                    serializeConfig.put(BigInteger.class, ToStringSerializer.instance);</span><br><span class="line">                    serializeConfig.put(Long.TYPE, ToStringSerializer.instance);</span><br><span class="line">                    redisService.setValue(redisKey, JSON.toJSONString(proceed, serializeConfig,</span><br><span class="line">                            SerializerFeature.PrettyFormat,</span><br><span class="line">                            SerializerFeature.WriteMapNullValue,</span><br><span class="line">                            SerializerFeature.WriteNullStringAsEmpty,</span><br><span class="line">                            SerializerFeature.DisableCircularReferenceDetect,</span><br><span class="line">                            SerializerFeature.WriteNullListAsEmpty,</span><br><span class="line">                            SerializerFeature.WriteDateUseDateFormat,</span><br><span class="line">                            SerializerFeature.IgnoreNonFieldGetter), expiration);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            response.setHeader(<span class="string">&quot;last-modified&quot;</span>, CommonDateUtil.nowStr());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line">            log.error(<span class="string">&quot;读取缓存数据失败&#123;&#125;,实时查询数据&quot;</span>, ex.getMessage());</span><br><span class="line">            proceed = pjp.proceed();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> proceed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">exportLimit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">siteId</span> <span class="operator">=</span> HttpUtils.getSizeId();</span><br><span class="line">        log.info(<span class="string">&quot;exportLimit siteId:&quot;</span>, siteId);</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">result</span> <span class="operator">=</span> RedisUtils.setIfAbsent(StrUtil.format(Common.EXPERT_LIMIT_LOCK_SITE_KEY, siteId), <span class="string">&quot;1&quot;</span>, expertLimitTime);</span><br><span class="line">        <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServiceException</span>(CommonStatusCode.FAILURE.getCode(), <span class="string">&quot;有导出任务正在进行中，请稍后重试&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>币圈入门第二天 - 交易赚钱的原理</title>
      <link href="/2024/08/13/%E5%B8%81%E5%9C%88%E5%85%A5%E9%97%A8%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
      <url>/2024/08/13/%E5%B8%81%E5%9C%88%E5%85%A5%E9%97%A8%E7%AC%AC%E4%BA%8C%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="交易赚钱的原理"><a href="#交易赚钱的原理" class="headerlink" title="交易赚钱的原理"></a>交易赚钱的原理</h1><hr><p>首先，先明确一点，你交易赚到的钱都是别人兜里的钱，这完全是一个从别人兜里拿钱的游戏。自然，你兜里的钱也会完全可以被别人拿走。</p><p>交易是如何赚钱的呢？ 首先让我们看看价格是如何上涨和下跌的，可能你会说：不就是买的单子比卖的单子多就会上涨吗？当然不是，当你买的时候，必须有对应的卖单你才能买入成交，同样，当你卖的时候，有对应的买单才能成交，所以何来哪一边单子比哪一边多?我们来看一个价格上涨的例子<br>假设当前价格交易所报价为10元<br>(上面挂单省略)<br>商家 D一共有12 个苹果，出价 10.8元&#x2F;个<br>商家C一共有6个苹果，出价10.6元&#x2F;个<br>商家B一共有5个苹果，出价10.5元&#x2F;个<br>商家A一共有2个苹果，出价10元&#x2F;个<br>此时买家出价情况如下:<br>买家A一想买3个苹果，出价10元&#x2F;个<br>买家B一想买3个苹果，出价9.9元&#x2F;个<br>买家C一想买4个苹果，出价9.5元&#x2F;个<br>(下面挂单省略)<br>这时候交易所给出的中间价格就是 10元，也就是说交易所此时报价为 10元。如果此时有个大户，市价买入 20个苹果，也就是说一口气吃掉4个卖单挂单，此时交易所报价会瞬间就会来到 10.8元，也就是说，你如果在大户市价买入之前买入，并且是以均价10 元买入的，当大户买入将价格推到 10.8 元时你卖出，你就挣了钱，挣得是谁的钱?大户的钱!市场的钱不会凭空产生，凭空消失，只是会到处转移(是不是和能量的定义一样，哈哈)<br>下面开始说说币圈最为主要的两种金融产品:现货与合约</p><h1 id="现货"><a href="#现货" class="headerlink" title="现货"></a>现货</h1><hr><p>简单地说，如果你在现货市场购买了一种商品，你可以立即获得这种商品，并且提现到你得冷钱包里面，但是需要你立刻付对应的款项:并且得保证钱必须足够，假设你有1000USDT，你购买得头寸价值(也就是商品价值)也只能有1000USDT，并且只有上涨时候才可以挣钱。或许你还有疑问，难道不应该是这样吗?难不成我有1000USDT还能买10000USDT 得东西?<br>答案是:当然可以!这就引出接下来合约的概念</p><h1 id="合约"><a href="#合约" class="headerlink" title="合约"></a>合约</h1><hr><p>记得我之前说过吗?有的交易员利用几千块就能赚到上百万，他们就是利用了合约，加了高杠杆，合约带来高收益回报的同也带来了巨大的风险，无数交易者因为合约而爆仓。同时，现货只有上涨才能挣钱，而合约可以做到下跌时也能挣时钱!（做空）</p><h2 id="杠杆倍数与仓位价值问题"><a href="#杠杆倍数与仓位价值问题" class="headerlink" title="杠杆倍数与仓位价值问题"></a>杠杆倍数与仓位价值问题</h2><hr><p> 有的人可能有点疑问，是不是设定了十倍杠杆就是反方向波动 10% 就会爆仓?当然不是<br>距离爆仓价格多少只和你当时所下单的头寸价值有关，和多少倍杠杆无关，也就是说，你有100USDT，有如果你就算开了十倍杠杆，最后你还是下单价值 100USDT 的头寸，你这个和现货基本差不多(除了无法提现)没有爆仓价格的<br>我来举一个交易者操作合约的例子，这个例子可以让你读懂几乎所有的合约知识。</p><h2 id="易员小明的合约操盘"><a href="#易员小明的合约操盘" class="headerlink" title="易员小明的合约操盘"></a>易员小明的合约操盘</h2><hr><p>今天一大早，交易员小明打开电脑，嘿、他看到 BTC已经大幅下跌很久，忽然有点上涨的迹象，虽然他没有找到进一步的证据去证明他的猜想，但是他有点急不可耐了，他害怕错过一个暴涨行情（Fomo，行业术语，全拼叫fear of mising out害怕错过），但是很不幸，由于他之前的胡乱操作，他原来 1000U 的账户里就剩下了 100USDT，于是他想通过这一波行情一步翻身，但是这点钱就算吃完这一整波暴涨(如果后续真的有这样的行情的话)，也只能赚几十U。于是左看看又看看，看到了交易所提供合约服务.他玩这么久，还不知道合约是怎么玩的，于是点开介绍，他看了一会，自己总结了一下:<strong>原来合约就是交易所借钱给你，借的钱的上限取绝于你自己设定的杠杆倍数</strong>，也就是说，自己有100USDT的话，现货只能购买价值小于等于100USDT的头寸，如果他玩合约，将杠杆倍数调到10倍的话，他最多可以购买价值1000USDT的头寸，不过是有代价的:<br>1、手续费变多，手续费是按购买头寸价值收取的，也就是说小明购买 1000USDT的BTC的话，交易所会收取1000*0.05%&#x3D;0.5的手续费<br>2、如果他真的下单价值 1000USDT 的头寸开多，如果价格没有按照他预想的方向波动，并且下跌了 10%，那么他的头寸会被强平，因为你已经把钱自己的钱亏光了(1000U的10%就是100U)，交易所会强平你的头寸，不会让你亏到交易所的钱，也就是你有输光的可能性<br>3、如果是永续合约的话，一般每8小时会被收取资金费率(也有可能是得到资金费率)主流币种这个资金费率几乎可以忽略不计，一些山寨币可能会很高<br>于是小明下定决心要大干一场，直接把杠杆调到 20 倍，把能开的头寸都押上去了，小明虽然只有100USDT，却可以持仓 2000USDT的头寸，按照他的设想，只要等到了这一波上涨，他的账户起码可以翻几倍，这样来回操作几次就回本了，多么诱人的回报。开仓后，小明目不转睛地盯着屏幕，看看自己这一场”赌“没赌对，果然，行情开始慢慢上涨，小明看到自己账户的浮盈开始变多，心理乐开了花:哎呀，我果然是交易天才。不一会，浮盈已经来到了 50U，别忘记，他的本金只有100USDT，也就是说行情上涨了5%,他利用杠杆就让账户翻倍了，如果现货他只赚到了5%。他还在想要不要继续拿下去的时候，忽然一根大阴线砸下来，直接砸下去 2%，他看到这里眼睛都直了，心理两个小人开始打架了:<br>持仓小人:妈的，明明可以赚 50U，这下可好只能赚 30U，我要持仓等待，等利润回到 50U 我就平仓<br>平仓小人:赶紧平仓吧，这波上涨并没有起来，空头看起来很强势，不如先平仓在看看后面行情<br>小明闭眼痛苦的想了想，于是决定等;利润回来就平仓，但是这个决定所带来的教训，会让他永远记住，等他做完这个决定以后，开始等待，后面几根区线开始开始出现一点点小阳线，这是多头无力的现象，但是小明开始自己安慰自己:万一后面来根大阳线，现在平仓太亏了，但是，<strong>市场不在乎你的仓位</strong>，突然一根比上次更为巨大的阴线砸了下来，小明直接从盈利变成亏损，这下他更坐不住了，他心理暗暗下决心，只要回本就平仓，但是市场可不管他怎么想，开始头也不回的向下走，看到亏损一步一步放大，小明大脑仿佛被冻住一样，不知道该怎么做，终于，价格终于下跌了 5% ，打到了小明的爆仓线，交易所瞬间把小明仓位强平了(也叫作爆仓了)，小明望着自己空荡荡的账户，好一会才同过神来。<br>故事就讲到这里，合约有两种方式做多与做空，上面是做多的例子，而做空的话，就是交易所借给你币，你去卖掉在价格下跌的时候去买回来还给交易所，中间的差价就是你赚到的钱。总的来说，做多就是上涨挣钱，做空就是下跌挣钱。上述描述的是U本位合约。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
        <tags>
            
            <tag> 加密货币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>币圈入门第一天</title>
      <link href="/2024/08/13/%E5%B8%81%E5%9C%88%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
      <url>/2024/08/13/%E5%B8%81%E5%9C%88%E5%85%A5%E9%97%A8%E7%AC%AC%E4%B8%80%E5%A4%A9/</url>
      
        <content type="html"><![CDATA[<h1 id="中心主旨"><a href="#中心主旨" class="headerlink" title="中心主旨"></a>中心主旨</h1><p>与其临渊羡鱼，不如退而结网。好多人进入币圈几个月都有点蒙圈，币圈坑很多，骗子多。相信看到这篇文的你，应该是属于币圈小白，对这个圈子没有多少了解，不知道从何开始，希望这篇文章能填补你们的只是盲区。<br>我也相信你有许多问题，例如:如何选择一家靠谱的交易所?交易为什么赚钱，背后原理是什么?交易所的各个下单指令都有哪些意思?该在什么情况下运用?我用什么方法才能赚钱?为什么有人可以几千块就赚到上百万?接下来我为你我会分成几篇文章一一为你解答，在你成为币圈传奇交易员之前，让我们先把这些基础知识搞定!好的，那么请你先把无关的学习类型的网页关掉，提上裤子，让我们开始吧!</p><h1 id="交易所"><a href="#交易所" class="headerlink" title="交易所"></a>交易所</h1><p>你必须得到交易所里面才能进行交易，而B圈交易所多如牛毛，该如何选择一家靠谱的交易所?你一定要清楚，交易所分为两种:CEX和 DEX</p><h2 id="CEX-中心化交易所"><a href="#CEX-中心化交易所" class="headerlink" title="CEX(中心化交易所)"></a>CEX(中心化交易所)</h2><p>CEX，又称中心化交易所，大多数交易者都选择在这里进行交易。为什么呢?CEX 交易所提供了 DEX 交易所所不具备的高流动性，以及低交易滑点，比 DEX 交易所更低的手续费，以及更快的成交速度。等等!你是不是在想什么是流动性?什么是滑点?还有交易所手续费如何收的?让我为你举一个例子!你一定就明白了!</p><h2 id="滑点"><a href="#滑点" class="headerlink" title="滑点"></a>滑点</h2><p>假如你来到了菜市场想看看苹果价格，想买20个苹果回去给小孩。这个时候你绕菜市场一圈发现几个商贩出价如下：<br>商家D 一共有12个苹果， 出家10.8元&#x2F;个<br>商家C 一共有6个苹果， 出家10.6元&#x2F;个<br>商家B 一共有5个苹果， 出家10.5元&#x2F;个<br>商家A 一共有2个苹果， 出家10元&#x2F;个<br>此时买家出价情况如下：<br>买家A 一想买3个苹果， 出价10元&#x2F;个<br>买家B 一想买4个苹果， 出价9.9元&#x2F;个<br>买家C 一想买5个苹果， 出价9.5元&#x2F;个<br>这个时候交易所中间的给出价格就是10元<br>这就是一个简单的交易所订单薄(Order Book)<br>真实交易所的交易订单簿：<br><img src="https://img.51santi.uk/file/d8d36b9881ff6dd38d0a4.jpg" alt="d8d36b9881ff6dd38d0a4.jpg"><br>这时候，你横空出世，并且打手一挥，我要买20个！ 只要数凑够20个数就行！不在乎价格，但是要以最优价格卖给我！（这里涉及到一个叫市价单的概念，后面文章会说）。<br>然后商贩听到你这句话瞬间高潮，纷纷跑过来卖给你，因为你的这次大手笔行为，因为一己之力把价格推到10.8，而不是开始的10块，但是你是在价格菜市场报价10块钱的时候买的，不过你想想，你手里的20个苹果，平均下来，每个价格是10元吗？当然不是！你可以去看看哪个订单簿：<br>商家D 一共有12个苹果，出价10.8元&#x2F;个<br>商家C 一共有6个苹果，出价10.6元&#x2F;个<br>商家B 一共有5个苹果，出价10.5元&#x2F;个<br>商家D 一共有2个苹果，出价10元&#x2F;个 也就是说你每个均价为(2<em>10 + 5</em>10.5 + 6<em>10.6 +7</em>10.8)&#x2F;20 &#x3D; 10.585也就是说你在价格是10元的时候买20个，但是你最后花了均价10.585才买了20个，这个价格之间的差距就叫做滑点。</p><p>所以，滑点低的意思就是：你购买的物品的平均价格与当时交易所的报价差距，当然滑点既可以往高了滑，也可往低了滑。这个和你当时下单的市场环境有关。所以，这里又引出了一个概念，叫深度。</p><h2 id="深度"><a href="#深度" class="headerlink" title="深度"></a>深度</h2><p>交易所深度指的是在一个交易所中，某个交易对(BTC&#x2F;USDT)买单和卖单的数量和价格信息。深度通常以一个深度表的形式呈现，其中包含了一系列价格水平和这些价格水平上的买入和卖出数量.<br>深度表通常由两部分组成：买单深度和卖单深度。买单深度指的是所有买单的数量和价格信息，按照价格从高到低排列；卖单深度指的是所有卖单的数量和价格信息，按照价格从低到高排列。<br>当你在一个交易所上查看某个交易对的深度表时，你会看到两个部分：买单深度和买单深度。以下是一个简单的离职，以btc&#x2F;usdt交易对为例：<br>卖单深度表<br>价格   数量<br>$60900 1BTC<br>$60600 2BTC<br>$60300 4BTC<br>$60100 1BTC</p><p>买单深度表<br>价格   数量<br>$60000 2.5BTC<br>$59000 2BTC<br>$58000 4BTC<br>$58000 1BTC<br>上面的例子中，买单深度表表示当前有人愿意以不同价格购买比特币，而卖单深度表表示当前有人愿意以不同价格出售比特币。例如，如果你想出售比特币，你可以选择在卖单深度表上选择最低的价格$60100购买1BTC，因为这是当前最低的购买价格。<br><strong><font color="red">当买卖双方的订单数量都很大且价格差异较小时，这种情况称为深度够好。</font></strong><br>深度够好的交易对通常意味着市场流动性高，交易量大，价格波动小，订单执行速度较快。这对于交易者来说非常重要，因为他们可以在深度够好的交易对中更容易买入或卖出大量的资产，而不必担心价格波动或订单无法执行的风险。<br>一般来说，深度够好的交易对通常有较高的交易量和较小的价格差（即买卖之间的差异较小），同时也有足够的市场参与者（即买房和卖方数量都很大）。</p><h2 id="流动性"><a href="#流动性" class="headerlink" title="流动性"></a>流动性</h2><p>什么叫做流动性？想象以下，你在一个拍卖会上，手里有一幅珍贵的画作，你可能需要一段时间才能找到合适的买家卖出去，这就是低流动性。 但是，如果你手里握着一堆钞票，你可以买任何你想要的东西，这就是高流动性。</p><h2 id="DEX交易所-去中心化交易所"><a href="#DEX交易所-去中心化交易所" class="headerlink" title="DEX交易所(去中心化交易所)"></a>DEX交易所(去中心化交易所)</h2><p>为什么已经有CEX（中心化交易所），还会有DEX这种手续费高，流动性低，滑点高的交易所，这种交易所又存在的必要吗？当然有！<br>去中心化交易所的主要优点是提供了更高的隐私保护和安全性。因为所有的交易都在区块链上公开透明地进行，所以很难进行欺诈或者操纵市场。此外，因为用户不需要将资金存储在交易所上，所以他们不需要担心交易所被黑客攻击或者倒闭的风险。 因为所有中心化交易所都是私人公司，理论上他们有可能圈钱跑路，在币圈极为常见。比如（中币，ftx）。<br>真正靠谱的交易所：OKX和币安<br>DEX交易所：Kine&#x2F;uniswap<br>如果不在coinmarketcap排行前十，最好不要使用。附上链接：<a href="https://coinmarketcap.com/zh/rankings/exchanges/">按交易量排名的交易所</a><br>PS：不要相信某小号上的交易所排名，某小号给钱就能上排名，之前出现过有人相信某小号的野鸡交易所，以为靠谱，结果交易所卷钱跑路。</p><h2 id="手续费"><a href="#手续费" class="headerlink" title="手续费"></a>手续费</h2><p>交易手续费在交易当中是一个非常重要的因素，因为交易所手续费在你每次开仓平仓都要收一次！加仓减仓也会收！也就是说，一笔完整的交易，最少会被收两次手续费！单次交易手续费一般为0.05%，也就是说最少两次平仓会扣你持仓价值的0.1%手续费，相当于你从微信提款到银行卡被扣掉的手续费钱。并且最少扣这么多，如果你中途加仓减仓会扣的更多！所以长久来看，手续费哪怕少10%也会帮你节省一大笔开销。<br>使用下面的链接注册交易所，并填写请码，你可以获得全网最高的20%的手续费减免!!<br>使用下面的链接注册交易所，并填写邀请码，你可以获得全网最高的20% 的手续费减免!!<br>在这里我个人用的是币安的交易所，币安的作为币圈第一交易所，手续费收的也最少，0.04%，其他交易所一般为0.05%，并且用下面的邀请码还能减免 20%，其他交易所我也会使用，因为不同交易所会推出不同的活动，也会有不同的机会，最重要的是不要把鸡蛋放在一个篮子里!<br>链接打开注册就好，发现邀请码空着的话手动填写一下即可。</p><h2 id="手续费减免链接"><a href="#手续费减免链接" class="headerlink" title="手续费减免链接"></a>手续费减免链接</h2><p>OKX（欧意减免20%手续费注册链接）：<br>邀请码：15162902<br>注册链接：<a href="https://okx.com/join/15162902">https://okx.com/join/15162902</a></p><p>Binance(币安减免20%手续费注册链接)<br>邀请码：CPA_004JXRWEL3<br>注册链接：<a href="https://www.binance.com/zh-CN/join?ref=CPA_004JXRWEL3">https://www.binance.com/zh-CN/join?ref=CPA_004JXRWEL3</a></p><h1 id="交易所选择总结"><a href="#交易所选择总结" class="headerlink" title="交易所选择总结"></a>交易所选择总结</h1><p>最后总结一下，交易所一般用 OKX或者币安上述几个就可以，一定要用上述具有优惠的邀请码注册，未来可以节省大笔手续费!野鸡交易所一定不要用!有的野鸡交易所为了吸引你，说给你90% 手续费优惠，但是鬼知道他们什么时候准备带着你的本金跑路!识别是否为野鸡交易所，到:CoinMarketCap 交易所排名上面看看，不是前十直接 pass 掉吧，千万别别钱没赚到，本金没了。你看上他那点手续费，他看上你的本金!</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
        <tags>
            
            <tag> 加密货币 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客美化/主题安装配置</title>
      <link href="/2024/08/12/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96-%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/"/>
      <url>/2024/08/12/Hexo%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96-%E4%B8%BB%E9%A2%98%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<p>这期教程演示将使用一款基于hexo-theme-butterfly修改的主題-安知鱼，安知鱼是一个简洁、美丽的静态hexo主题</p><p>项目地址：<a href="https://github.com/anzhiyu-c/hexo-theme-anzhiyu">https://github.com/anzhiyu-c/hexo-theme-anzhiyu</a><br>官方文档：<a href="https://docs.anheyu.com/initall.html">https://docs.anheyu.com/initall.html</a></p><h1 id="1-安装主题"><a href="#1-安装主题" class="headerlink" title="1.安装主题"></a>1.安装主题</h1><h2 id="1-1-Git-安裝"><a href="#1-1-Git-安裝" class="headerlink" title="1.1. Git  安裝"></a>1.1. Git  安裝</h2><p>在博客根目录里 安装最新版主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b main https://github.com/anzhiyu-c/hexo-theme-anzhiyu.git themes/anzhiyu</span><br></pre></td></tr></table></figure><p>第一次使用需要安装 pug 以及 stylus 的渲染器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure><h2 id="1-2-应用主题"><a href="#1-2-应用主题" class="headerlink" title="1.2. 应用主题"></a>1.2. 应用主题</h2><p>修改 hexo 配置文件_config.yml，把主题改为anzhiyu</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: anzhiyu</span><br></pre></td></tr></table></figure><h2 id="1-3-覆盖配置"><a href="#1-3-覆盖配置" class="headerlink" title="1.3. 覆盖配置"></a>1.3. 覆盖配置</h2><p>覆盖配置可以使主题配置放置在 anzhiyu 目录之外，避免在更新主题时丢失自定义的配置。</p><p>如果你是linux系统就执行以下命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cp</span> -rf ./themes/anzhiyu/_config.yml ./_config.anzhiyu.yml</span><br></pre></td></tr></table></figure><p>如果你是windows系统就请手动将&#x2F;themes&#x2F;anzhiyu&#x2F;_config.yml复制到根目录下并重命名为_config.anzhiyu.yml即可。</p><p>以后如果修改任何主题配置，都只需修改 _config.anzhiyu.yml 的配置即可。</p><p>注意：</p><ul><li>只要存在于 _config.anzhiyu.yml 的配置都是高优先级，修改原 _config.yml 是无效的。</li><li>每次更新主题可能存在配置变更，请注意更新说明，可能需要手动对 _config.anzhiyu.yml 同步修改。</li><li>想查看覆盖配置有没有生效，可以通过 hexo g –debug 查看命令行输出。</li><li>如果想将某些配置覆盖为空，注意不要把主键删掉，不然是无法覆盖的</li></ul><h2 id="1-4-配置主题与主站配置文件"><a href="#1-4-配置主题与主站配置文件" class="headerlink" title="1.4. 配置主题与主站配置文件"></a>1.4. 配置主题与主站配置文件</h2><p>到这一步主题部署就完成了，就是这么简单！！！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//本地预览</span><br><span class="line">hexo cl; hexo s</span><br><span class="line"></span><br><span class="line">//推送更新上线</span><br><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure><h2 id="1-5-生成标签页和分类页"><a href="#1-5-生成标签页和分类页" class="headerlink" title="1.5. 生成标签页和分类页"></a>1.5. 生成标签页和分类页</h2><p>执行以下命令生成标签页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page tags</span><br></pre></td></tr></table></figure><p>找到 source&#x2F;tags&#x2F;index.md 这个文件，修改添加 type: “tags”</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 标签</span><br><span class="line">date: 2024-07-05 03:36:02</span><br><span class="line">type: &quot;tags&quot;</span><br><span class="line">comments: false</span><br><span class="line">top_img: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>执行以下命令生成分类页</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new page categories</span><br></pre></td></tr></table></figure><p>找到 source&#x2F;categories&#x2F;index.md 这个文件，修改添加 type: “categories”</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">date: 2024-07-05 03:36:48</span><br><span class="line">aside: false</span><br><span class="line">top_img: false</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>剩下的工作就是配置_config.yml和_config.anzhiyu.yml文件，修改博客参数。</p><h1 id="2-配置文章模版"><a href="#2-配置文章模版" class="headerlink" title="2. 配置文章模版"></a>2. 配置文章模版</h1><p>&#x2F;scaffolds目录下有几个模版文件，其中</p><ul><li>post.md：新建博文模版</li><li>page.md：新建标签页模版<br>post.md模版，仅供参考<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125; <span class="comment">#【必需】页面标题</span></span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125; <span class="comment">#【必需】页面创建日期</span></span><br><span class="line"><span class="attr">updated:</span> <span class="comment">#【可选】页面更新日期</span></span><br><span class="line"><span class="attr">tags:</span> <span class="comment">#【可选】文章标签</span></span><br><span class="line"><span class="attr">categories:</span> <span class="comment">#【可选】文章分类</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#【可选】文章关键字</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#【可选】文章描述</span></span><br><span class="line"><span class="attr">top:</span> <span class="comment"># 1 置顶</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="comment">#【可选】文章顶部图片</span></span><br><span class="line"><span class="attr">comments:</span> <span class="comment">#【可选】显示文章评论模块(默认 true)</span></span><br><span class="line"><span class="attr">cover:</span> <span class="string">https://img.090227.xyz/file/ae62475a131f3734a201c.png</span> <span class="comment">#【可选】文章缩略图(如果没有设置 top_img,文章页顶部将显示缩略图，可设为 false/图片地址/留空)</span></span><br><span class="line"><span class="attr">toc:</span> <span class="comment">#【可选】显示文章 TOC(默认为设置中 toc 的 enable 配置)</span></span><br><span class="line"><span class="attr">toc_number:</span> <span class="comment">#【可选】显示 toc_number(默认为设置中 toc 的 number 配置)</span></span><br><span class="line"><span class="attr">toc_style_simple:</span> <span class="comment">#【可选】显示 toc 简洁模式</span></span><br><span class="line"><span class="attr">copyright:</span> <span class="comment">#【可选】显示文章版权模块(默认为设置中 post_copyright 的 enable 配置)</span></span><br><span class="line"><span class="attr">copyright_author:</span> <span class="comment">#【可选】文章版权模块的文章作者</span></span><br><span class="line"><span class="attr">copyright_author_href:</span> <span class="comment">#【可选】文章版权模块的文章作者链接</span></span><br><span class="line"><span class="attr">copyright_url:</span> <span class="comment">#【可选】文章版权模块的文章作者链接</span></span><br><span class="line"><span class="attr">copyright_info:</span> <span class="comment">#【可选】文章版权模块的版权声明文字</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="comment">#【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</span></span><br><span class="line"><span class="attr">katex:</span> <span class="comment">#【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="comment">#【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="comment">#【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)</span></span><br><span class="line"><span class="attr">aside:</span> <span class="comment">#【可选】显示侧边栏 (默认 true)</span></span><br><span class="line"><span class="attr">swiper_index:</span> <span class="number">10</span> <span class="comment">#【可选】首页轮播图配置 index 索引，数字越小越靠前</span></span><br><span class="line"><span class="attr">top_group_index:</span> <span class="number">10</span> <span class="comment">#【可选】首页右侧卡片组配置, 数字越小越靠前</span></span><br><span class="line"><span class="attr">ai:</span> <span class="comment">#【可选】文章ai摘要</span></span><br><span class="line"><span class="attr">background:</span> <span class="string">&quot;#fff&quot;</span> <span class="comment">#【可选】文章主色，必须是16进制颜色且有6位，不可缩减，例如#ffffff 不可写成#fff</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="string">&lt;div</span> <span class="string">class=&quot;video-container&quot;&gt;</span></span><br><span class="line">[<span class="string">up主专用，视频内嵌代码贴在这</span>]</span><br><span class="line"><span class="string">&lt;/div&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&lt;style&gt;</span></span><br><span class="line"><span class="string">.video-container</span> &#123;</span><br><span class="line">    <span class="attr">position:</span> <span class="string">relative;</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span><span class="string">%;</span></span><br><span class="line">    <span class="attr">padding-top:</span> <span class="number">56.25</span><span class="string">%;</span> <span class="string">/*</span> <span class="number">16</span><span class="string">:9</span> <span class="string">aspect</span> <span class="string">ratio</span> <span class="string">(height/width</span> <span class="string">=</span> <span class="number">9</span><span class="string">/16</span> <span class="string">*</span> <span class="number">100</span><span class="string">%)</span> <span class="string">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="string">.video-container</span> <span class="string">iframe</span> &#123;</span><br><span class="line">    <span class="attr">position:</span> <span class="string">absolute;</span></span><br><span class="line">    <span class="attr">top:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">    <span class="attr">left:</span> <span class="number">0</span><span class="string">;</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">100</span><span class="string">%;</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">100</span><span class="string">%;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">&lt;/style&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>page.md模版，仅供参考<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> &#123;&#123; <span class="string">title</span> &#125;&#125; <span class="comment">#【必需】页面标题</span></span><br><span class="line"><span class="attr">date:</span> &#123;&#123; <span class="string">date</span> &#125;&#125; <span class="comment">#【必需】页面创建日期</span></span><br><span class="line"><span class="attr">type:</span> <span class="comment">#【必需】标签、分类、关于、音乐馆、友情链接、相册、相册详情、朋友圈、即刻页面需要配置</span></span><br><span class="line"><span class="attr">updated:</span> <span class="comment">#【可选】页面更新日期</span></span><br><span class="line"><span class="attr">comments:</span> <span class="comment">#【可选】显示页面评论模块(默认 true)</span></span><br><span class="line"><span class="attr">description:</span> <span class="comment">#【可选】页面描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment">#【可选】页面关键字</span></span><br><span class="line"><span class="attr">top_img:</span> <span class="string">https://img.090227.xyz/file/ae62475a131f3734a201c.png</span> <span class="comment">#【可选】页面顶部图片</span></span><br><span class="line"><span class="attr">mathjax:</span> <span class="comment">#【可选】显示 mathjax(当设置 mathjax 的 per_page: false 时，才需要配置，默认 false)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attr">katex:</span> <span class="comment">#【可选】显示 katex(当设置 katex 的 per_page: false 时，才需要配置，默认 false)</span></span><br><span class="line"><span class="attr">aside:</span> <span class="comment">#【可选】显示侧边栏 (默认 true)</span></span><br><span class="line"><span class="attr">aplayer:</span> <span class="comment">#【可选】在需要的页面加载 aplayer 的 js 和 css,请参考文章下面的音乐 配置</span></span><br><span class="line"><span class="attr">highlight_shrink:</span> <span class="comment">#【可选】配置代码框是否展开(true/false)(默认为设置中 highlight_shrink 的配置)</span></span><br><span class="line"><span class="attr">top_single_background:</span> <span class="comment">#【可选】部分页面的顶部模块背景图片</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="meta"></span></span><br></pre></td></tr></table></figure></li></ul><h1 id="文章置顶"><a href="#文章置顶" class="headerlink" title="文章置顶"></a>文章置顶</h1><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-topindex --save</span><br></pre></td></tr></table></figure><p>设置置顶<br>给需要置顶的文章加入top参数，如下：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">每天一个linux命令</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2017-01-23 11:41:48</span></span><br><span class="line"><span class="attr">top:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">运维</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">linux命令</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>如果存在多个置顶文章，top后的参数越大，越靠前。</p><h1 id="开启本地搜索"><a href="#开启本地搜索" class="headerlink" title="开启本地搜索"></a>开启本地搜索</h1><p>安装插件<br>你需要安装 hexo-generator-search，根据它的文档去做相应配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><p>设置主题配置文件</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">preload:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">CDN:</span></span><br></pre></td></tr></table></figure><p>enable: 是否开启本地 搜索<br>preload: 预加载，开启后，进入网页后会自动加载搜索文件。关闭时，只有点击搜索按钮后，才会加载搜索文件<br>CDN: 搜索文件的 CDN 地址（默认使用的本地链接）</p><h1 id="添加任意文件"><a href="#添加任意文件" class="headerlink" title="添加任意文件"></a>添加任意文件</h1><p>例如当我们想在网站根目录添加ads.txt文件，来通过站长验证时，我们只需要在&#x2F;source文件夹下放置该文件即可。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>最强免费安装office，永久使用</title>
      <link href="/2024/08/06/%E6%9C%80%E5%BC%BA%E5%85%8D%E8%B4%B9%E5%AE%89%E8%A3%85office%EF%BC%8C%E6%B0%B8%E4%B9%85%E4%BD%BF%E7%94%A8/"/>
      <url>/2024/08/06/%E6%9C%80%E5%BC%BA%E5%85%8D%E8%B4%B9%E5%AE%89%E8%A3%85office%EF%BC%8C%E6%B0%B8%E4%B9%85%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="office免费永久使用，地表最强安装"><a href="#office免费永久使用，地表最强安装" class="headerlink" title="office免费永久使用，地表最强安装"></a>office免费永久使用，地表最强安装</h1><h2 id="1-Google搜索-ms-microsoft-odt并下载"><a href="#1-Google搜索-ms-microsoft-odt并下载" class="headerlink" title="1. Google搜索 ms microsoft odt并下载"></a>1. Google搜索 ms microsoft odt并下载</h2><p> 下载链接：<a href="https://www.microsoft.com/en-us/download/details.aspx?id=49117">https://www.microsoft.com/en-us/download/details.aspx?id=49117</a></p><h2 id="2-管理员方式运行officedeploymentTool-选择一个新建的office文件夹并确定"><a href="#2-管理员方式运行officedeploymentTool-选择一个新建的office文件夹并确定" class="headerlink" title="2. 管理员方式运行officedeploymentTool -&gt; 选择一个新建的office文件夹并确定"></a>2. 管理员方式运行officedeploymentTool -&gt; 选择一个新建的office文件夹并确定</h2><p> 有如下几个文件说明提取成功<br><img src="https://img.51santi.uk/file/342948c8adbc87370406b.png" alt="342948c8adbc87370406b.png"></p><h2 id="3-在文件所在空白处按住shift-鼠标右键，打开powershell窗口"><a href="#3-在文件所在空白处按住shift-鼠标右键，打开powershell窗口" class="headerlink" title="3. 在文件所在空白处按住shift+鼠标右键，打开powershell窗口"></a>3. 在文件所在空白处按住shift+鼠标右键，打开powershell窗口</h2><h2 id="4-运行如下命令进行安装"><a href="#4-运行如下命令进行安装" class="headerlink" title="4.运行如下命令进行安装"></a>4.运行如下命令进行安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.\setup.exe /configure .\configuration-Office2021Enterprise.xml</span><br></pre></td></tr></table></figure><h2 id="5-等半小时左右安装"><a href="#5-等半小时左右安装" class="headerlink" title="5.等半小时左右安装"></a>5.等半小时左右安装</h2><p><img src="https://img.51santi.uk/file/eb245d202c44edecedf8e.png" alt="eb245d202c44edecedf8e.png"></p><h2 id="6-打开office-word核对是否已激活，如果没激活重启电脑即可。"><a href="#6-打开office-word核对是否已激活，如果没激活重启电脑即可。" class="headerlink" title="6.打开office word核对是否已激活，如果没激活重启电脑即可。"></a>6.打开office word核对是否已激活，如果没激活重启电脑即可。</h2><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>无人值守高度自定义的纯净 Windows 11/10 系统</title>
      <link href="/2024/08/06/%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E9%AB%98%E5%BA%A6%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BA%AF%E5%87%80-Windows-11-10-%E7%B3%BB%E7%BB%9F/"/>
      <url>/2024/08/06/%E6%97%A0%E4%BA%BA%E5%80%BC%E5%AE%88%E9%AB%98%E5%BA%A6%E8%87%AA%E5%AE%9A%E4%B9%89%E7%9A%84%E7%BA%AF%E5%87%80-Windows-11-10-%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="安装windows-11-10-无人值守，无需交互的方式配置-创建账号"><a href="#安装windows-11-10-无人值守，无需交互的方式配置-创建账号" class="headerlink" title="安装windows 11&#x2F;10 无人值守，无需交互的方式配置&#x2F;创建账号"></a>安装windows 11&#x2F;10 无人值守，无需交互的方式配置&#x2F;创建账号</h1><h2 id="1-配置系统应答文件：【点击前往】"><a href="#1-配置系统应答文件：【点击前往】" class="headerlink" title="1.配置系统应答文件：【点击前往】"></a>1.配置系统应答文件：<a href="https://schneegans.de/windows/unattend-generator/">【点击前往】</a></h2><p>参考配置文件网盘链接：<a href="https://pan.baidu.com/s/17qXzYTxhmnAZPmlmFbj2fQ?pwd=js68">https://pan.baidu.com/s/17qXzYTxhmnAZPmlmFbj2fQ?pwd=js68</a><br>提取码：js68</p><h2 id="2-系统镜像编辑器：【点击下载】"><a href="#2-系统镜像编辑器：【点击下载】" class="headerlink" title="2.系统镜像编辑器：【点击下载】"></a>2.系统镜像编辑器：<a href="https://www.anyburn.com/">【点击下载】</a></h2><h3 id="2-1打开编辑器"><a href="#2-1打开编辑器" class="headerlink" title="2.1打开编辑器"></a>2.1打开编辑器</h3><h3 id="2-2编辑镜像文件"><a href="#2-2编辑镜像文件" class="headerlink" title="2.2编辑镜像文件"></a>2.2编辑镜像文件</h3><p> <img src="https://img.51santi.uk/file/c8b28489e90e634fcf0e6.jpg" alt="c8b28489e90e634fcf0e6.jpg"></p><h3 id="2-3添加交互配置文件（autounattend-xml）"><a href="#2-3添加交互配置文件（autounattend-xml）" class="headerlink" title="2.3添加交互配置文件（autounattend.xml）"></a>2.3添加交互配置文件（autounattend.xml）</h3><p> <img src="https://img.51santi.uk/file/cb479ea96fdf022290485.jpg" alt="cb479ea96fdf022290485.jpg"></p><h2 id="3-Windows-系统镜像官方下载：【Windows-11】、【Windows-10】"><a href="#3-Windows-系统镜像官方下载：【Windows-11】、【Windows-10】" class="headerlink" title="3.Windows 系统镜像官方下载：【Windows 11】、【Windows 10】"></a>3.Windows 系统镜像官方下载：<a href="https://www.microsoft.com/software-download/windows11">【Windows 11】</a>、<a href="https://www.microsoft.com/en-us/software-download/windows10">【Windows 10】</a></h2><h2 id="4-refus镜像刻录到U盘【点击前往】"><a href="#4-refus镜像刻录到U盘【点击前往】" class="headerlink" title="4.refus镜像刻录到U盘【点击前往】"></a>4.refus镜像刻录到U盘<a href="https://rufus.ie/en/">【点击前往】</a></h2><p>Rufus 是一个可以帮助格式化和创建可引导USB闪存盘的工具，比如 USB 随身碟，记忆棒等等。<br>在如下场景中会非常有用：</p><ul><li>你需要把一些可引导的ISO格式的镜像（Windows，Linux，UEFI等）创建成USB 安装盘的时候</li><li>你需要使用一个还没有安装操作系统的设备的时候</li><li>你需要从DOS系统刷写 BIOS或者其他固件的时候</li><li>你需要运行一个非常底层的工具的时候</li></ul><h2 id="5-安装完系统后激活系统（如下为激活Windows-10作为参考）"><a href="#5-安装完系统后激活系统（如下为激活Windows-10作为参考）" class="headerlink" title="5. 安装完系统后激活系统（如下为激活Windows 10作为参考）"></a>5. 安装完系统后激活系统（如下为激活Windows 10作为参考）</h2><p>以管理员方式运行powershell，逐个执行以下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br><span class="line">slmgr /skms kms.03k.org</span><br><span class="line">slmgr /ato</span><br></pre></td></tr></table></figure><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>区块链知识-Layer0/Layer1/Layer2到底是什么</title>
      <link href="/2024/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9F%A5%E8%AF%86-Layer0-Layer1-Layer2%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/"/>
      <url>/2024/07/30/%E5%8C%BA%E5%9D%97%E9%93%BE%E7%9F%A5%E8%AF%86-Layer0-Layer1-Layer2%E5%88%B0%E5%BA%95%E6%98%AF%E4%BB%80%E4%B9%88/</url>
      
        <content type="html"><![CDATA[<p>举个简单的例子，一个公司业务量庞大，于是他开了一个子公司，把一些业务交由子公司处理。母公司就是Layer 1，子公司就是Layer 2。这样，母公司的负担就减轻了。首先，我们需要定义第 1 层是什么：第 1 层网络是基础层，或者说是区块链的底层基础设施。也称为主网络或“主网”，它不仅定义了生态系统的核心规则，还可以验证和完成交易，如以太坊、比特币和 Solana 等示例。第 1 层区块链通常从强调去中心化和安全性开始 — — 这两者都是任何健全网络的核心原则，并且（除了一些例外）由多元化的全球开发人员和参与者（如验证者）网络维护。由于缺乏任何中央权威或监督，这些平台要求技术本身具有与生俱来的安全性，以保护用户免受诈骗和攻击。由于设计中的这种优先级，更不用说维持功能齐全的生态系统所需的大量资源，它们通常缺乏可扩展性。虽然一些开发人员认为无法在安全性、去中心化和可扩展性之间实现平衡是该技术的一个不可阻挡的缺陷（被称为区块链三难困境），但第 2 层解决方案，例如以太坊上的rollups和比特币上的闪电网络是用于解决这些问题的一种解决方案。</p><h1 id="Layer-1"><a href="#Layer-1" class="headerlink" title="Layer 1"></a>Layer 1</h1><p>Layer 1包含大家最熟悉的比特币、以太坊之类的链。Layer 1定义可以说是区块链的底层架构和协议，他的另外一个名字是公链。<br><img src="https://telegra.ph/file/56fb32e9a0dcd59b3fbc8.jpg" alt="56fb32e9a0dcd59b3fbc8.jpg"></p><h2 id="Layer-1-链的特点"><a href="#Layer-1-链的特点" class="headerlink" title="Layer 1 链的特点"></a>Layer 1 链的特点</h2><ul><li>自己独立的链，不依赖于其他链，就可以独立运作</li><li>支持独立运作，有配套的架构和参与机制，比如他们有自己的共识机制，有自己的Ledger(账本)，有自己的节点网络（node），有自己的加密算法，也有自己的原始代币</li><li>他们通常都支持更上层的协议和应用从而打造他们自己的生态，但也有特殊情况，比如比特币的链，由于过于原始，在向上支持这一块做的比较少<br>所以当我们看到一条链，如果符合上述绝大部分特点，不用看细节，基本上可以明白，他是一条Layer公链。以大家熟悉的以太坊的链做参考，以太坊支持各种上层的应用。<br><img src="https://img.51santi.uk/file/447dc2f5081fd4c902c66.jpg" alt="447dc2f5081fd4c902c66.jpg"></li></ul><h1 id="Layer-2"><a href="#Layer-2" class="headerlink" title="Layer 2"></a>Layer 2</h1><p>Layer 2是指以Layer 1为基础，建立在Layer 1之上的协议，他们并不是刚才我们提到的建立在Layer 1之上的应用，Layer 2的开发，其实目的也是为了解决很多Layer 1的问题，比如扩容和提速等等。</p><p>其中比较通常的一个做法是，对于很多需要处理的复杂的交易，不是都在Layer 1的链上做处理和记录，而是拿下来在Layer 2的链处理，处理完之后，只是把处理结果的少量信息发回到Layer 1，目前主要的Layer 2还是围绕以太坊链来做的。</p><p>因为以太坊的生态是最大的，服务这个生态是最有利可图的，以太坊链有以下几个不同的扩容方案：</p><ul><li>Optimistic rollups 乐观汇总</li><li>Zero-knowledge rollups 零知识汇总</li><li>State channels 状态通道</li><li>Sidechains 侧链</li><li>Plasma 子链</li><li>Validiums 有效性证明<br>想更多的了解以上扩展方案，请登录以太坊官网查询<br><a href="https://ethereum.org/en/developers/docs/scaling/#validium">https://ethereum.org/en/developers/docs/scaling/#validium</a><br><img src="https://img.51santi.uk/file/147bb7ee924591ddc6951.jpg" alt="147bb7ee924591ddc6951.jpg"></li></ul><h2 id="Layer-2和Layer-1-的主要区别"><a href="#Layer-2和Layer-1-的主要区别" class="headerlink" title="Layer 2和Layer 1 的主要区别"></a>Layer 2和Layer 1 的主要区别</h2><ul><li>他对节点的要求是很随意</li><li>不像Layer 1通常采用比较分布式的共识机制</li><li>Layer 2的Node可能是一个或者一些server的cluster</li><li>参与的可能是一大群个体，也可能是一个公司或者商业组织，甚至是少数的个人节点，除了Node之外，根据方向的不同，也可能被成为Operator、sequencer之类的。</li><li>Layer 2的安全性还是主要依托于他对应的Layer 1的链</li><li>Layer 1和Layer 2是有最广泛共识的</li></ul><h1 id="Layer-0"><a href="#Layer-0" class="headerlink" title="Layer 0"></a>Layer 0</h1><p>不是那么流行的概念，通常Layer 0是指传输数据的基础架构和协议层，一般承担的任务是区块链和传统互联网的结合，Layer 0当时也要负责和Layer 1 甚至和Layer 2的兼容，Layer 0作为基础，也经常会有扩容之类的需求，</p><p>Polkadot是相对比较公认的一个提供了Layer 0的例子<br><img src="https://telegra.ph/file/0d33878db1f17398ef1c5.jpg" alt="0d33878db1f17398ef1c5.jpg"><br>Polkadot项目主要是提供了一个叫中继链（Relay Chain）底层架构。</p><p>这个中继链承担着保证在它之上的Layer 1的公链之间的沟通和安全的任务，换句话说，这个中继链是Layer 1的链互相高效沟通的信息桥梁，这也是为什么Polkadot经常被人称为是一个跨链的项目，这些在Polkadot中继链之上的，由开发者搭建起来的Layer 1的链，被称作Parachain，其中两个相对比较有名气的项目时Moonriver和Karura。</p><p>因为他们在中继链的眼中，是平行的，是同一级别的。这种跨链的沟通，是非常有用的，因为良好的共通性，可以解决之前我们提到的目前比较不便的低效的信息共享问题。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>Layer 0是最底层的架构，用于帮助Layer 1的链之间的跨链沟通，同时有些也承担和传统网络沟通的任务</li><li>Layer 1是我们最常见的链，也是比较底层的架构，通常知名的Layer 1的链都有自己的庞大生态，Layer 1主要用来支持基于它的协议，在他上面开发的区块链应用。</li><li>Layer 2的链通常是为了实现Layer 1的扩容而存在的。<br><img src="https://telegra.ph/file/acd6c7abe2225360b46ef.jpg" alt="acd6c7abe2225360b46ef.jpg"></li></ul><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>TCP协议深度解读</title>
      <link href="/2024/07/19/TCP%E5%8D%8F%E8%AE%AE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB/"/>
      <url>/2024/07/19/TCP%E5%8D%8F%E8%AE%AE%E6%B7%B1%E5%BA%A6%E8%A7%A3%E8%AF%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="位、字节、字"><a href="#位、字节、字" class="headerlink" title="位、字节、字"></a>位、字节、字</h1><h2 id="1、位（bit）"><a href="#1、位（bit）" class="headerlink" title="1、位（bit）"></a>1、位（bit）</h2><p>来自英文bit，名叫比特，表示二进制位。<strong>位是计算机内部数据存储的最小单位</strong>，11011011是一个8位二进制。一个二进制位只能表示1或0两种状态；二个二进制位可以表示00、01、10、11四种状态；三位二进制数可以表示八种状态。。。。</p><h2 id="2、字节（byte）"><a href="#2、字节（byte）" class="headerlink" title="2、字节（byte）"></a>2、字节（byte）</h2><p>字节来自英文byte，叫‘拜特’， 习惯用大写的‘B’表示<br><strong>字节是计算机中数据处理的基本单位。</strong>计算机中以字节位单位存储和解释信息，规定一个字节由八个二进制位构成，即1个字节等于8个比特（1Byte&#x3D;8bit）。八位二进制数最小位00000000，最大位11111111；通常1个字节可以存入一个ASCII码，2个字节可存放一个汉字国标码。</p><h2 id="3、字"><a href="#3、字" class="headerlink" title="3、字"></a>3、字</h2><p><strong>计算机进行数据处理时，一次存取、加工和传输的数据长度称为字（word）。</strong>一个字通常由一个或多个（一般是字节的整数位）字节构成。例如286微机的字是由2个字节组成，他的字长位16；486微机的字由4个字节组成，他的字长位32位。 计算机的字长决定了cpu一次操作处理实际位数的多少，由此可见计算机的字长越大，其性能越好。</p><blockquote><p>在存取器中，通常每个单元存储一个字，因此每个字都是可以寻址的。字的长度用位来表示<br>在计算机的运算器、控制器中，通常是以字为单位进行传送的。例如，送往控制器去的字是指令，而送往运算器去的字就是一个数。在计算机中作为一个整体被存取、传送、处理的二进制数字符串叫做一个字或单元，每个字中二进制位数的长度，称为字长。一个字有若干个字节组成，不同的计算机系统的字长是不同的，常见的有8位、16位、32位、64位等，字长越长，计算机一次处理的信息位就越多，精度就越高，字长是计算机性能的一个重要指标。目前主流微机都是32位机。注意字与字长的区别，字是单位，而字长是指标，指标需要用单位去衡量。就像生活中重量与公斤的关系，公斤是单位，重量是指标，重要需要用公斤加以衡量。<br>8个位（bit）称为一个字节（byte），两个字节称为一个字（word），两个自称位一个双字（dword），两个双字称为一个四字（qword）</p></blockquote><h3 id="3-1字长"><a href="#3-1字长" class="headerlink" title="3.1字长"></a>3.1字长</h3><p>计算机的每个字所包含的位数称位字长。根据计算机的不同，字长有固定的和可变的两种。固定字长，即字长度不论什么情况都是固定不变的；可变字长，则在一定范围内，其长度是可变的。</p><p><strong>计算机的字长是指它一次可处理的二进制数字的数目。</strong>计算机处理数据的速率，自然和它一次能加工的位数以及进行运算的快慢有关。如果一台计算机的字长是另一台计算机的两倍，即使灵台计算机的速度相同，在相同的时间内，前者能做的工作是后者的两倍。</p><p>一般来讲，大型计算机的字长位32-64位，小型计算机位12-32位，而微型计算机为4-16位。字长是衡量计算机性能的一个重要因素。</p><h3 id="3-2字块"><a href="#3-2字块" class="headerlink" title="3.2字块"></a>3.2字块</h3><p>在信息处理中，一群字作为一个单元来处理的称为“字块”，也称“字组”。例如，储存于磁盘的一个磁道上的字群就称为一个字块，在磁带上通常每120个字符就间隔一个字块标志，也称为一个字块。块与块之间一般留1.27-2.54厘米的间隔。在大容量存储中，信息都是以字块为单位而存入的，因此只有字块才是可选址的。目前，在告诉缓存技术中引入了“字块”的概念。</p><h1 id="TCP报文（标准长度20字节）"><a href="#TCP报文（标准长度20字节）" class="headerlink" title="TCP报文（标准长度20字节）"></a>TCP报文（标准长度20字节）</h1><p>TCP(Transmission Contorl Protocol) 传输控制协议是一种面向连接的、可靠的、基于字节流的传输层协议<br>TCP报文格式如下：<br><img src="https://img.51santi.uk/file/6ef4a306cf7592744035f.jpg#pic_left" alt="6ef4a306cf7592744035f.jpg"><br>TCP数据包每次能够传输的最大长度&#x3D;MTU(1500B)-IP头(20B)-TCP头(20B)&#x3D;1460Bytes.<br><img src="https://img.51santi.uk/file/8c19c6f54117839a710ad.png#pic_left" alt="8c19c6f54117839a710ad.png"><br><strong>源端口号</strong>（2字节）：<br>  d5 df (54751)<br><strong>目的端口号</strong>（2字节）：<br>  22 b8  (8888)<br><img src="https://img.51santi.uk/file/72f86baf8867b1aca86a5.png" alt="72f86baf8867b1aca86a5.png"><br>TCP报文头中的源端口号和目的端口号同IP数据报中的源IP与目的IP唯一确定一条TCP连接。<br><strong>序列号</strong>（4字节）：<br>  37 59 56 75<br>  用来标识TCP发送端向TCP接收端发送的数据字节流<br>  <strong>确认序列号</strong>（4字节）<br>  由于该报文为SYN报文，ACK标志位0，故没有确认序号（ACK标志位1时确认序列号才有效）<br>  一旦建立连接，该值将始终发送（同ACK标志）<br>  <strong>头部长度</strong>（4位）：报文头长度（单位：位）&#x2F;32<br>  1000 (转化为10进制为8， 8<em>32&#x2F;8 &#x3D; 32，该报文包头长度为32个字节 )<br>  存在该字段是因为TCP报头任选字段长度可变，四位TCP报头长度为0101.<br>  报头不包含任何任选字段则长度为20字节；4为能表示的最大值为1111，转化为10进制为15， 15</em>32&#x2F;8 &#x3D; 60，故报头最大长度为60字节；<br>  <strong>标志位</strong>（12位）：<br>    0000 00010010<br>    Reserved：</p><pre><code>000~ ~~~~~~~~ECN（Explicit Congetsion Notification）：~~~0 ~~~~~~~~ = N / NS / Nonce Sum：有效排除潜在的ECN滥用，RFC 3540~~~~ 0~~~~~~~ = C / CWR（Congestion Window Reduced）：拥塞窗口减少标志~~~~ ~0~~~~~~ = E / ECE / ECN-Echo：ECE / ECN标志Control Bits：~~~~ ~~0~~~~~ = URG / Urgent：紧急指针有效性标志~~~~ ~~~1~~~~ = ACK / Acknowledgment：确认序号有效性标志，一旦一个连接建立起来，该标志总被置为1，即除了请求建立连接报文（仅设置Syn标志位为1），其它所有报文的该标志总为1~~~~ ~~~~0~~~ = PSH / Push：Push标志*（接收方应尽快将报文段提交至应用层）*~~~~ ~~~~~0~~ = RST / Reset：重置连接标志~~~~ ~~~~~~1~ = SYN / Syn：同步序号标志（发起一个新的连接）~~~~ ~~~~~~~0 = F / Fin：传输数据结束标志/释放一个连接</code></pre><p>  <strong>窗口大小</strong>（2字节）：窗口大小标志着TCP缓冲区内部剩余空间的大小，起到流量控制的作用。如果窗口满了，那么这个时候是不允许数据接口的，后面到达的数据会被丢失。<br>  20 00 （00100000 00000000） &#x3D; 8192<br>  由于2字节能够表示的最大正整数为65535，故窗口最大值为65535<br>  <strong>校验和</strong>（2字节）：校验和覆盖整个TCP报文端；强制字段，由发送端填充，CRC校验。由接收端进行验证数据的时候如果校验不通过。此处的校验和不仅仅校验TCP首部，还校验数据部分。<br>   2e 2f<br>   <strong>紧急指针</strong>（2字节）：当urgent标志为1时，紧急指针才有效，标识着哪部分的数据为紧急数据<br>    00 00<br>    <strong>任选字段</strong>（0-40字节）<br>&#x3D;&#x3D; <strong>【重要的字段】：</strong>&#x3D;&#x3D;</p><ul><li><em>源端口号与目的端口号：标识了发送方与接收方的地址</em>，IP地址和端口号合称位套接字。</li><li><strong>序列号和确认号：</strong> 32位序列号与32位确认号：序列号与确认号可以理解成两个通信进程在收发数据的时候互相应答的信息。比如说，A进程从序列号1000开始给B进程发数据，发送五个数据。那么在B收到数据回复的时候，这里A的确认序列号应该是从1006，如果是1003，那意味着1004、1005数据包没有收到，于是A启动重发机制。这也保证了数据的可靠性，也是TCP特点之一。序列号是进程发送消息的号码，而确认号是期望目的进程返回的号码。进行对比，从而验证数据包是否到达。</li></ul><h1 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h1><p>  在TCP&#x2F;IP协议中，TCP协议提供可靠的连接服务，采用三次握手建立一个连接。<br> <img src="https://img.51santi.uk/file/56fae17da4d16e1522f3b.png" alt="56fae17da4d16e1522f3b.png"></p><ul><li>第一次握手：client先产生一个初始序列号seq &#x3D;<br>ISN（C），作为syn并将该数据包发送给server，client进入SYN_SENT状态，等待server确认</li><li>第二次握手：server收到数据包后也发送自己的SYN报文作为响应，并初始化序列号seq &#x3D;<br>ISN（S），为了确认client的seq，server将client发送的seq加1，作为ACK发送给client，<br>Server进入SYN_RCVD状态。（SYN为synchronize的缩写， ACK为acknowledgment的缩写）</li><li>第三次握手：为了确认Server的SYN，Client将server发送的seq加1，作为ACK发送给server。client和server进入ESTABLISHED状态，完成三次握手，随后client与server之间可以开始传输数据了。</li></ul><p>通过这样的三次握手，客户端与服务端建立可靠的双工的连接，开始传送数据。三次握手的最主要目的是保证连接是双工的，可靠更多的是通过重传机制来保证的。</p><h2 id="半连接、半打开、半关闭状态"><a href="#半连接、半打开、半关闭状态" class="headerlink" title="半连接、半打开、半关闭状态"></a>半连接、半打开、半关闭状态</h2><ul><li><strong>半连接状态：</strong>发生的TCP三次握手过程中，客户端向服务器发起连接，服务器也进行了回应，但是客户端却不进行3次握手.</li><li><strong>半打开状态：</strong>在TCP连接中，如果某一段关闭了连接或者是异常关闭，则该连接处于半打开状态。解决半打开问题：引入心跳机制就可以察觉半打开状态。</li><li><strong>半关闭状态：</strong>当TCP连接中客户端向服务端发送FIN请求关闭，服务端回应ACK之后，并没有立即发送FIN给客户端，客户端就处于半关闭状态，此时客户端可以接收服务器发送的数据，但是客户端已经不能向服务器发送数据。</li></ul><h2 id="SYN-flood攻击"><a href="#SYN-flood攻击" class="headerlink" title="SYN flood攻击"></a>SYN flood攻击</h2><p>在三次握手过程中，服务器发送SYN-ACK之后，收到客户端的ACK之前的TCP连接称为半连接(half-open connect)。此时服务器处于SYN_RCVD状态。当收到ACK后，服务器转入ESTABLISHED态。<br><img src="https://img.51santi.uk/file/028795667155d0c093de4.jpg" alt="028795667155d0c093de4.jpg"></p><p>  SYN攻击就是攻击客户端在短时间内伪造大量不存在的IP地址，向服务器不断发送syn包，服务器回复确认包，并等待客户的确认，由于源地址是不存在的，服务器需要不断的重发直至超时，这些伪造的SYN包将长时间占用未连接队列，正常的SYN请求被丢弃，目标系统运行缓慢，严重者引起网络堵塞甚至系统瘫痪。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//检测是否被Syn攻击</span><br><span class="line">netstat -n -p TCP | grep SYN_RCVD</span><br></pre></td></tr></table></figure><p>  一般较新的TCP&#x2F;IP协议栈都对这一过程进行修正来防范Syn攻击，修改tcp协议实现。主要方法由SynAttackProtect保护机制、SYN cookies技术、增加最大半连接和缩短超时时间等。但是不能完全防范Syn攻击。</p><h2 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h2><p><img src="https://img.51santi.uk/file/d6d1e37adf1f4b9482b21.jpg" alt="d6d1e37adf1f4b9482b21.jpg"></p><ul><li>第一次挥手：client发送一个FIN， seq&#x3D;k，<br>用来关闭client到server的数据传送，client进入FIN_WAIT_1状态；</li><li>第二次挥手：server收到FIN后，发送一个ACK（k+1）给client，确认序列号为收到序号+1（与SYN相同，一个FIN占用一个序号），server进入CLOSE_WAIT状态；</li><li>第三次挥手：server发送一个FIN， seq&#x3D;L，<br>用来关闭server到client的数据传送，server金融LAST_WAIT状态</li><li>第四次挥手：client收到FIN后，client进入TIME_WAIT状态，接着发送一个ACK(L+1)给server，<br>确认序号为收到序号+1，server进入CLOSED状态，完成四次挥手。</li></ul><h3 id="1、为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"><a href="#1、为什么建立连接是三次握手，而关闭连接却是四次挥手呢？" class="headerlink" title="1、为什么建立连接是三次握手，而关闭连接却是四次挥手呢？"></a>1、为什么建立连接是三次握手，而关闭连接却是四次挥手呢？</h3><p>在三次握手是，服务器可以把ACK和SYN（ACK起应答作用，而SYN起同步作用）放在一个报文里来发送，但是四次挥手时，服务端发送的FIN与ACK是分开发送的。</p><p>如果已经建立了连接，但是客户端突然出现故障了怎么办？</p><p>TCP还设有一个保活计时器，显然，客户端如果出现故障，服务器不能一直等下去，白白浪费资源。服务器每收到一次客户端的请求后都会重新复位这个计时器，时间通常是设置为2小时，若两小时还没有收到客户端的任何数据，服务器就会发送一个探测报文段，以后每隔75秒钟发送一次。若一连发送10个探测报文仍然没反应，服务器就认为客户端出了故障，接着就关闭连接。</p><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建hexo博客</title>
      <link href="/2024/07/18/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/"/>
      <url>/2024/07/18/%E6%90%AD%E5%BB%BAhexo%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<p>本文详细介绍了如何使用Hexo框架搭建一个个人博客，并将其部署到 GitHub Pages和Cloudflare Pages上。主要内容包括：</p><ul><li>环境准备：安装 Node.js和 Git</li><li>配置Git和GitHub：设置SSH密钥，创建GitHub仓库</li><li>初始化Hexo项目：安装Hexo，创建新博客</li><li>部署到 GitHub Pages：配置部署设置，推送静态文件</li><li>部署到Cloudflare Pages：连接GitHub仓库，自动部署</li><li>基本使用方法：创建新文章，本地预览，发布更新</li></ul><p>这个教程适合那些想要快速搭建个人博客，但又不想花费太多成本的人。通过使用Hexo、 GitHub和Cloudflare的免费服务，您可以轻松创建一个高效、简洁的博客网站。</p><h2 id="1-事前准备"><a href="#1-事前准备" class="headerlink" title="1.事前准备"></a>1.事前准备</h2><ul><li>域名（非必须，你也可以使用免费域名，或者GitHub.io或Pages.dev分配的域名也可以）</li><li>GitHub（必须，你需要注册一个GitHub帐号）</li><li>Cloudflare（非必须，你需要注册一个Cloudflare帐号，这样你就可以将博客部署在CF的CDN里加速，但是你也可以直接使用GitHub.io分配的域名）</li></ul><h2 id="2-软件支持"><a href="#2-软件支持" class="headerlink" title="2.软件支持"></a>2.软件支持</h2><ul><li>Node（必须）</li><li>Git（必须）</li><li>VSCode（非必须，款轻量型的IDE）</li></ul><h3 id="2-1安装node"><a href="#2-1安装node" class="headerlink" title="2.1安装node"></a>2.1安装node</h3><ul><li>打开Node官网，下载和自己系统相配的Node的安装程序，否则会出现安装问题。下载地址：<a href="https://nodejs.org/en">https://nodejs.org/en</a></li><li>下载后安装，安装的目录可以使用默认目录C:&#x2F;Program Files&#x2F;nodejs&#x2F;</li><li>安装完成后，检查是否安装成功。在键盘按下win + R键，输入CMD，然后回车，打开CMD窗口，执行node -v命令，看到版本信息，则说明安装成功。</li><li>修改npm源。npm下载各种模块，默认是从国处服务器下载，速度较慢，建议配置成华为云镜像源。打开CMD窗口，运行如下命令:<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://mirrors.huaweicloud.com/repository/npm/</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-2安装GIT"><a href="#2-2安装GIT" class="headerlink" title="2.2安装GIT"></a>2.2安装GIT</h3><ul><li>进入官网下载适合你当前系统的 Git：<a href="https://git-scm.com/downloads">https://git-scm.com/downloads</a></li><li>下载后傻瓜式安装Git即可，安装的目录最好使用默认目录C:&#x2F;Program Files&#x2F;Git</li><li>点击电脑左下角开始即可看见Git Bash（建议使用。</li></ul><h2 id="3-配置-Git-密钥并连接至-Github"><a href="#3-配置-Git-密钥并连接至-Github" class="headerlink" title="3.配置 Git 密钥并连接至 Github"></a>3.配置 Git 密钥并连接至 Github</h2><p>常用 Git 命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git config -l  //查看所有配置</span><br><span class="line">git config --system --list //查看系统配置</span><br><span class="line">git config --global --list //查看用户（全局）配置</span><br></pre></td></tr></table></figure><h3 id="3-1-配置用户名和邮箱"><a href="#3-1-配置用户名和邮箱" class="headerlink" title="3.1. 配置用户名和邮箱"></a>3.1. 配置用户名和邮箱</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;你的用户名&quot;</span><br><span class="line">git config --global user.email &quot;你的邮箱&quot;</span><br></pre></td></tr></table></figure><p>通过git config -l 检查是否配置成功。<br><img src="https://img.51santi.uk/file/be7347836e9e2e2f8271c.jpg" alt="be7347836e9e2e2f8271c.jpg"></p><h3 id="3-2-配置公钥连接Github"><a href="#3-2-配置公钥连接Github" class="headerlink" title="3.2. 配置公钥连接Github"></a>3.2. 配置公钥连接Github</h3><ol><li>执行以下命令生成ssh公钥，此公钥用于你的计算机连接Github<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的邮箱&quot;</span></span><br></pre></td></tr></table></figure>提示Enter file in which to save the key直接一路回车即可，新手小白不推荐设置密钥<br><img src="https://img.51santi.uk/file/d9481254265c914c89649.jpg" alt="d9481254265c914c89649.jpg"></li></ol><p>之后打开C盘下用户文件夹下的.ssh的文件夹，会看到以下文件</p><ul><li>id_rsa私钥</li><li>id_rsa.pub公钥</li></ul><p><img src="https://img.51santi.uk/file/20b5d0171147ad6d5bc78.jpg" alt="20b5d0171147ad6d5bc78.jpg"><br>用记事本打开上述图片中的公钥id_rsa.pub，复制里面的内容，然后开始在github中配置ssh密钥。<br><img src="https://img.51santi.uk/file/4eedc9e221a44aa536731.jpg" alt="4eedc9e221a44aa536731.jpg"></p><ol start="2"><li>将 SSH KEY 配置到 GitHub<br>进入github，点击右上角头像 选择settings，进入设置页后选择 SSH and GPG keys，名字随便起，公钥填到Key那一栏。<br><img src="https://img.51santi.uk/file/59e52fba976bf1331b7ba.jpg" alt="59e52fba976bf1331b7ba.jpg"><br><img src="https://img.51santi.uk/file/b85b1a94530631ae2a9fb.jpg" alt="b85b1a94530631ae2a9fb.jpg"><br><img src="https://img.51santi.uk/file/7d317076eb02afa508f33.jpg" alt="7d317076eb02afa508f33.jpg"></li><li>测试连接，输入以下命令<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br></pre></td></tr></table></figure>第一次连接会提示Are you sure you want to continue connecting (yes&#x2F;no&#x2F;[fingerprint])?，输入yes即可<br><img src="https://img.51santi.uk/file/7ebb59811f7c3e92dedf4.jpg" alt="7ebb59811f7c3e92dedf4.jpg"><br>出现连接到账户的信息，说明已经大功告成，至此完成了环境准备工作。<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Hi jhonsnow123! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure></li></ol><h3 id="3-3-配置公钥连接Github"><a href="#3-3-配置公钥连接Github" class="headerlink" title="3.3. 配置公钥连接Github"></a>3.3. 配置公钥连接Github</h3><ol><li>点击右上角的+按钮，选择New repository，创建一个&lt;用户名&gt;.github.io的仓库。</li><li>仓库名字的格式必须为：&lt;用户名&gt;.github.io (注意：前缀必须为用户名，此为预览博客需要，后期可修改仓库名)</li><li>可见性必须选择 Public 方便第一次部署检查问题，点击 Creat repository 进行创建即可<br>  <img src="https://img.51santi.uk/file/109388de5059022cfd5a5.jpg" alt="109388de5059022cfd5a5.jpg"></li></ol><h2 id="4-初始化-Hexo-博客"><a href="#4-初始化-Hexo-博客" class="headerlink" title="4.初始化 Hexo 博客"></a>4.初始化 Hexo 博客</h2><ol><li>创建一个文件夹来保存博客源码（我这里选的路径为D:&#x2F;Hexo-Blog），在文件夹内右键鼠标，选择Open Git Bash here<br>  <img src="https://img.51santi.uk/file/e273c710e4b9a7849da67.jpg" alt="e273c710e4b9a7849da67.jpg"></li><li>在Git BASH输入如下命令安装 Hexo  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli &amp;&amp; hexo -v</span><br></pre></td></tr></table></figure>  <img src="https://img.51santi.uk/file/6c2c6db7615e5a8ac9fcc.jpg" alt="6c2c6db7615e5a8ac9fcc.jpg"></li><li>安装完后输入hexo -v验证是否安装成功。<br><img src="https://img.51santi.uk/file/2e0d3a0f71726e651209c.jpg" alt="2e0d3a0f71726e651209c.jpg"></li></ol><p>  4.初始化 Hexo 项目安装相关依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init blog-demo</span><br><span class="line">cd blog-demo</span><br><span class="line">npm i</span><br></pre></td></tr></table></figure><p><img src="https://img.51santi.uk/file/fe4a3d5f5c65d5ed466b9.jpg" alt="fe4a3d5f5c65d5ed466b9.jpg"><br> 5. 初始化项目后，blog-demo有如下结构：<br> <img src="https://img.51santi.uk/file/69eccf0a00005d2bacaff.png" alt="69eccf0a00005d2bacaff.png"></p><ul><li>node_modules：依赖包</li><li>scaffolds：生成文章的一些模板</li><li>source：用来存放你的文章</li><li>themes：主题</li><li>.npmignore：发布时忽略的文件（可忽略）</li><li>_config.landscape.yml：主题的配置文件</li><li>config.yml：博客的配置文件</li><li>package.json：项目名称、描述、版本、运行和开发等信</li></ul><ol start="6"><li><p>输入hexo cl &amp;&amp; hexo s启动项目<br> <img src="https://img.51santi.uk/file/360189db8aa027efce4ad.png" alt="360189db8aa027efce4ad.png"></p></li><li><p>打开浏览器，输入地址：<a href="http://localhost:4000/">http://localhost:4000/</a> ，看到下面的效果，说明你的博客已经构建成功了。<br>  <img src="https://img.51santi.uk/file/dbee2ccb55ce155b988d4.png" alt="dbee2ccb55ce155b988d4.png"></p></li></ol><h2 id="5-将静态博客挂载到-GitHub-Pages"><a href="#5-将静态博客挂载到-GitHub-Pages" class="headerlink" title="5.将静态博客挂载到 GitHub Pages"></a>5.将静态博客挂载到 GitHub Pages</h2><ol><li>安装 hexo-deployer-git   <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></li><li>修改 _config.yml 文件<br>在blog-demo目录下的_config.yml，就是整个Hexo框架的配置文件了。可以在里面修改大部分的配置。详细可参考官方的配置描述。<br>修改最后一行的配置，将repository修改为你自己的github项目地址即可，还有分支要改为main代表主分支（注意缩进）。 <figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">repository:</span> <span class="string">git@github.com:jhonsnow123/jhonsnow123.github.io.git</span></span><br><span class="line"><span class="attr">branch:</span> <span class="string">main</span></span><br></pre></td></tr></table></figure></li><li>修改好配置后，运行如下命令，将代码部署到 GitHub（Hexo三连）。 <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Git BASH终端</span><br><span class="line">hexo clean &amp;&amp; hexo generate &amp;&amp; hexo deploy  </span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"></span><br><span class="line">// VSCODE终端</span><br><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure></li></ol><ul><li>hexo clean：删除之前生成的文件，可以用hexo cl缩写。</li><li>hexo generate：生成静态文章，可以用hexo g缩写</li><li>hexo deploy：部署文章，可以用hexo d缩写<br><img src="https://img.51santi.uk/file/da69c2d2fafa56b39eeeb.png" alt="da69c2d2fafa56b39eeeb.png"><br>注意：deploy时可能要你输入 username 和 password。<br>如果出现Deploy done，则说明部署成功了。<br><img src="https://img.51santi.uk/file/f419ab7e0cdbf6b32ab8a.png" alt="f419ab7e0cdbf6b32ab8a.png"><br>等两分钟，打开浏览器访问：<a href="https://jhonsnow123.github.io/">https://jhonsnow123.github.io</a> ，这时候我们就可以看到博客内容了。</li></ul><h2 id="6-将静态博客挂载到-Cloudflare-Pages"><a href="#6-将静态博客挂载到-Cloudflare-Pages" class="headerlink" title="6.将静态博客挂载到 Cloudflare Pages"></a>6.将静态博客挂载到 Cloudflare Pages</h2><ol><li><p>在 Workers 和 Pages 中选择 Pages 的 连接到 Git<br><img src="https://img.51santi.uk/file/3d24654e2243d1cc773bf.png" alt="3d24654e2243d1cc773bf.png"><br><img src="https://img.51santi.uk/file/ca8e35be8f87cf1863395.png" alt="ca8e35be8f87cf1863395.png"></p></li><li><p>然后登录你Blog仓库对应的GitHub帐号<br><img src="https://img.51santi.uk/file/0ab0525b0c3e0d298533d.png" alt="0ab0525b0c3e0d298533d.png"><br><img src="https://img.51santi.uk/file/d295b4b025a9ad1259a0c.png" alt="d295b4b025a9ad1259a0c.png"></p></li><li><p>点击保存并部署后等待部署完成即可。<br><img src="https://img.51santi.uk/file/68f8d149df486882735d8.png" alt="68f8d149df486882735d8.png"></p></li><li><p>提示成功！您的项目已部署到以下区域：全球后，浏览器访问：<a href="https://jhonsnow123-github-io.pages.dev/">https://jhonsnow123-github-io.pages.dev</a> ，这时候我们就可以看到博客内容了。<br><img src="https://img.51santi.uk/file/f999ae4939ad77dcc39a7.png" alt="f999ae4939ad77dcc39a7.png"><br>这时你也就可以将你的&lt;用户名&gt;.github.io的仓库设置为Private私库了</p></li><li><p>如果你有自己的域名，你可以在这里绑定你自己的自定义域，即可<br><img src="https://img.51santi.uk/file/75e79412cf72404a90f58.png" alt="75e79412cf72404a90f58.png"><br><img src="https://img.51santi.uk/file/3f28706ab930b9d2dc6c7.png" alt="3f28706ab930b9d2dc6c7.png"></p></li></ol><h1 id="如何使用"><a href="#如何使用" class="headerlink" title="如何使用"></a>如何使用</h1><h2 id="1-新建一篇博文"><a href="#1-新建一篇博文" class="headerlink" title="1.新建一篇博文"></a>1.新建一篇博文</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new &quot;新博文&quot;</span><br></pre></td></tr></table></figure><p>然后用文本编辑器去编辑_posts&#x2F;新博文文.md里的内容即可，注意要使用Markdown格式书写。<br>详细使用方法可以查阅 <a href="https://hexo.io/zh-cn/docs/writing">https://hexo.io/zh-cn/docs/writing</a></p><h2 id="2-编辑完文章保存后可以使用如下命令，生成本地页面-http-localhost-4000-，进行预览"><a href="#2-编辑完文章保存后可以使用如下命令，生成本地页面-http-localhost-4000-，进行预览" class="headerlink" title="2.编辑完文章保存后可以使用如下命令，生成本地页面 http://localhost:4000/ ，进行预览"></a>2.编辑完文章保存后可以使用如下命令，生成本地页面 <a href="http://localhost:4000/">http://localhost:4000/</a> ，进行预览</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Git BASH终端</span><br><span class="line">hexo cl &amp;&amp; hexo s</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"></span><br><span class="line">// VSCODE终端</span><br><span class="line">hexo cl; hexo s</span><br></pre></td></tr></table></figure><h2 id="3-确认无误后使用以下命令，将本地文章推送至GitHub仓库即可"><a href="#3-确认无误后使用以下命令，将本地文章推送至GitHub仓库即可" class="headerlink" title="3.确认无误后使用以下命令，将本地文章推送至GitHub仓库即可"></a>3.确认无误后使用以下命令，将本地文章推送至GitHub仓库即可</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// Git BASH终端</span><br><span class="line">hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</span><br><span class="line"></span><br><span class="line">// 或者</span><br><span class="line"></span><br><span class="line">// VSCODE终端</span><br><span class="line">hexo cl; hexo g; hexo d</span><br></pre></td></tr></table></figure><h2 id="4-常见问题"><a href="#4-常见问题" class="headerlink" title="4.常见问题"></a>4.常见问题</h2><p> github访问超时问题。如图<br> <img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMsZ4tcE7zkY9GPqLKKIcqGht7n3LUAAgzCMRuMhVlUmdmgbxwDpRcBAAMCAAN5AAM2BA" alt="giterror_2025-01-18_15-44-19.png"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&#x27;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: Spawn failed</span><br><span class="line">    at ChildProcess.&lt;anonymous&gt; (C:\software\jhonsnowBlog\jhonsnow123.github.io\node_modules\hexo-deployer-git\node_modules\hexo-util\lib\spawn.js:51:21)</span><br><span class="line">    at ChildProcess.emit (node:events:519:28)</span><br><span class="line">    at cp.emit (C:\software\jhonsnowBlog\jhonsnow123.github.io\node_modules\cross-spawn\lib\enoent.js:34:29)</span><br><span class="line">    at ChildProcess._handle.onexit (node:internal/child_process:294:12)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ssh -T git@github.com</span><br><span class="line">ssh: connect to host github.com port 22: Connection timed out</span><br></pre></td></tr></table></figure><p>这个错误，这通常意味着有些东西阻止了你的连接。下面是一些建议的解决步骤：<br>端口阻塞：某些网络或ISP可能会阻塞SSH的默认端口（22）。尝试使用443端口连接到GitHub：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -T -p 443 git@ssh.github.com</span><br></pre></td></tr></table></figure><p>如果这成功了，你可以考虑永久地更改你的SSH配置以使用443端口。打开或创建文件 ~&#x2F;.ssh&#x2F;config<br><img src="https://pic.51santi.uk/api/cfile/AgACAgUAAyEGAASQGKXDAAMtZ4uUehxd0V-iKwaWAhtyjCQKJ2wAAm3CMRuMhVlUko1-oFLMXn8BAAMCAAN4AAM2BA" alt="image.png"></p><p> 文件中添加以下内容<br> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Add section below to it</span></span><br><span class="line">Host github.com</span><br><span class="line">  Hostname ssh.github.com</span><br><span class="line">  Port 443</span><br></pre></td></tr></table></figure><br>再次测试连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\software\jhonsnowBlog\jhonsnow123.github.io&gt; ssh -T git@github.com</span><br><span class="line">Hi jhonsnow123! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br></pre></td></tr></table></figure><div class="video-container">[up主专用，视频内嵌代码贴在这]</div><style>.video-container {    position: relative;    width: 100%;    padding-top: 56.25%; /* 16:9 aspect ratio (height/width = 9/16 * 100%) */}.video-container iframe {    position: absolute;    top: 0;    left: 0;    width: 100%;    height: 100%;}</style>]]></content>
      
      
      <categories>
          
          <category> 技术分享 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo doc</title>
      <link href="/2024/07/18/Hexo-doc/"/>
      <url>/2024/07/18/Hexo-doc/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>基本资源分享</title>
      <link href="/2024/07/06/%E5%9F%BA%E6%9C%AC%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/"/>
      <url>/2024/07/06/%E5%9F%BA%E6%9C%AC%E8%B5%84%E6%BA%90%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="记录生活的点点滴滴"><a href="#记录生活的点点滴滴" class="headerlink" title="记录生活的点点滴滴"></a>记录生活的点点滴滴</h1><h3 id="用大自然的语言书写人生信条"><a href="#用大自然的语言书写人生信条" class="headerlink" title="用大自然的语言书写人生信条"></a>用大自然的语言书写人生信条</h3><p>More info: <a href="https://blog.090227.xyz/p/HexoBlogNo1/">Writing</a></p><p><img src="https://img1.131213.xyz/file/c81ff84e86e7deda73c89.jpg" alt="c81ff84e86e7deda73c89.jpg"></p><h1 id="推荐素材网址"><a href="#推荐素材网址" class="headerlink" title="推荐素材网址"></a>推荐素材网址</h1><ul><li><p>无版权可商用的图片网站1：<a href="https://pixabay.com/">https://pixabay.com/</a></p></li><li><p>无版权可商用的图片网站2：<a href="https://www.pexels.com/">https://www.pexels.com/</a></p></li><li><p>无版权可商用的图片网站3：<a href="https://unsplash.com/">https://unsplash.com/</a></p></li><li><p>阿里图标库：<a href="https://www.iconfont.cn/">https://www.iconfont.cn/</a></p></li><li><p>fontawesome图标库：<a href="https://fontawesome.com/">https://fontawesome.com/</a></p></li><li><p>水印去除：<a href="https://huggingface.co/spaces/Sanster/Lama-Cleaner-lama">https://huggingface.co/spaces/Sanster/Lama-Cleaner-lama</a></p></li></ul><h1 id="文档地址"><a href="#文档地址" class="headerlink" title="文档地址"></a>文档地址</h1><ul><li>安知鱼文档：<a href="https://docs.anheyu.com/">https://docs.anheyu.com/</a></li></ul><h1 id="技术工具地址"><a href="#技术工具地址" class="headerlink" title="技术工具地址"></a>技术工具地址</h1><ul><li>IDEA&#x2F;常用工具网站：<a href="https://33tool.com/idea/">https://33tool.com/idea/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 经验分享 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
